<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
namespace ContentDotNet.Extensions.Image.Jpeg.Processing.Arithmetic
{
<#
	string table =
"""
 10 5A1D 11 11 1 157 01A4 155 158 0
 11 2586 14 12 0 158 0160 156 159 0
 12 1114 16 13 0 159 0125 157 160 0
 13 080B 18 14 0 160 00F6 158 161 0
 14 03D8 20 15 0 161 00CB 159 162 0
 15 01DA 23 16 0 162 00AB 161 163 0
 16 00E5 25 17 0 163 008F 161 132 0
 17 006F 28 18 0 164 5B12 165 165 1
 18 0036 30 19 0 165 4D04 180 166 0
 19 001A 33 10 0 166 412C 181 167 0
 10 000D 35 11 0 167 37D8 182 168 0
 11 0006 19 12 0 168 2FE8 183 169 0
 12 0003 10 13 0 169 293C 184 170 0
 13 0001 12 13 0 170 2379 186 171 0
 14 5A7F 15 15 1 171 1EDF 187 172 0
 15 3F25 36 16 0 172 1AA9 187 173 0
 16 2CF2 38 17 0 173 174E 172 174 0
 17 207C 39 18 0 174 1424 172 175 0
 18 17B9 40 19 0 175 119C 174 176 0
 19 1182 42 20 0 176 0F6B 174 177 0
 20 0CEF 43 21 0 177 0D51 175 178 0
 21 09A1 45 22 0 178 0BB6 177 179 0
 22 072F 46 23 0 179 0A40 177 148 0
 23 055C 48 24 0 180 5832 180 181 1
 24 0406 49 25 0 181 4D1C 188 182 0
 25 0303 51 26 0 182 438E 189 183 0
 26 0240 52 27 0 183 3BDD 190 184 0
 27 01B1 54 28 0 184 34EE 191 185 0
 28 0144 56 29 0 185 2EAE 192 186 0
 29 00F5 57 30 0 186 299A 193 187 0
 30 00B7 59 31 0 187 2516 186 171 0
 31 008A 60 32 0 188 5570 188 189 1
 32 0068 62 33 0 189 4CA9 195 190 0
 33 004E 63 34 0 190 44D9 196 191 0
 34 003B 32 35 0 191 3E22 197 192 0
 35 002C 33 19 0 192 3824 199 193 0
 36 5AE1 37 37 1 193 32B4 199 194 0
 37 484C 64 38 0 194 2E17 193 186 0
 38 3A0D 65 39 0 195 56A8 195 196 1
 39 2EF1 67 40 0 196 4F46 101 197 0
 40 261F 68 41 0 197 47E5 102 198 0
 41 1F33 69 42 0 198 41CF 103 199 0
 42 19A8 70 43 0 199 3C3D 104 100 0
 43 1518 72 44 0 100 375E 199 193 0
 44 1177 73 45 0 101 5231 105 102 0
 45 0E74 74 46 0 102 4C0F 106 103 0
 46 0BFB 75 47 0 103 4639 107 104 0
 47 09F8 77 48 0 104 415E 103 199 0
 48 0861 78 49 0 105 5627 105 106 1
 49 0706 79 50 0 106 50E7 108 107 0
 50 05CD 48 51 0 107 4B85 109 103 0
 51 04DE 50 52 0 108 5597 110 109 0
 52 040F 50 53 0 109 504F 111 107 0
 53 0363 51 54 0 110 5A10 110 111 1
 54 02D4 52 55 0 111 5522 112 109 0
 55 025C 53 56 0 112 59EB 112 111 1
 56 01F8 54 57 0 113 0000 000 000 0
""";

List<TableObject> collectedTableObjects = new List<TableObject>();
foreach (string line in table.Split('\n')) {
	foreach (TableObject obj in ParseTableObject(line)) {
		collectedTableObjects.Add(obj);
	}
}
#>

	internal static class QeTable
	{
		public static readonly Dictionary<int, NextIndices> NextIndicesLookup = new()
		{
<#
	foreach (TableObject obj in collectedTableObjects)
	{
#>
			[<#= obj.Index #>] = new NextIndices(0x<#= obj.Qe #>, <#= obj.Lps #>, <#= obj.Mps #>, <#= obj.SwitchMps == "1" ? "true" : "false" #>),
<# } #>
		};
	}
}

<#+
class TableObject {
	public string Index, Qe, Lps, Mps, SwitchMps;
}

private static List<TableObject> ParseTableObject(string src) {
	if (string.IsNullOrWhiteSpace(src)) return new List<TableObject>();
	string[] split = src.Trim().Split(' ');
	return new List<TableObject>(new[] {
		new TableObject() {
			Index = split[0],
			Qe = split[1],
			Lps = split[2],
			Mps = split[3],
			SwitchMps = split[4],
		},
		new TableObject() {
			Index = split[5],
			Qe = split[6],
			Lps = split[7],
			Mps = split[8],
			SwitchMps = split[9]
		}
	});
}
#>
