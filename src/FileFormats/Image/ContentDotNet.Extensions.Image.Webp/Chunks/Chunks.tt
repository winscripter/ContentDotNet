<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
#nullable enable

namespace ContentDotNet.Extensions.Image.Webp.Chunks
{
<#
	C("Vp8Lossy", "VP8 ").F("Stream", "Vp8Data");
	C("Vp8Lossless", "VP8L").F("Stream", "Vp8Data");
	C("Vp8Extension", "VP8 ").F("bool", "ContainsIccp").F("bool", "ContainsAlpha").F("bool", "ContainsExif").F("bool", "ContainsXmp").F("bool", "ContainsAnimation").F("uint", "CanvasWidthMinusOne").F("uint", "CanvasHeightMinusOne");
	C("Animation", "ANIM").F("uint", "BackgroundColor").F("ushort", "LoopCount");
	C("AnimationFrame", "ANMF").F("uint", "FrameX").F("uint", "FrameY").F("uint", "FrameWidthMinusOne").F("uint", "FrameHeightMinusOne").F("uint", "FrameDuration").F("bool", "BlendingMethod").F("bool", "DisposalMethod").F("Stream", "FrameData");
	C("Alpha", "ALPH").F("uint", "Preprocessing").F("uint", "FilterMethod").F("uint", "CompressionMethod").F("Stream", "AlphaBitstream");
	C("IccColorProfile", "ICCP").F("Stream", "IccData");
	C("ExifMetadata", "EXIF").F("Stream", "ExifData");
	C("XmpMetadata", "XMP ").F("Stream", "XmpData");

	foreach (Chunk chunk in _chunks)
	{
		string baseInterface = "WebpChunkBase";
		string className = $"Webp{chunk.Name}Chunk";
#>

	/// <summary>
	///   The WebP <c><#= chunk.Fcc #></c> chunk data representation.
	/// </summary>
	[FourCC("<#= chunk.Fcc #>")]
	public class <#= className #> : <#= baseInterface #>, IEquatable<<#= className #>?>
	{
<#
	foreach (Field field in chunk.Fields)
	{
#>
	
		/// <summary>
		///   Represents one of WebP chunk properties, named, <#= field.Name #>.
		/// </summary>
		public <#= field.Type #>? <#= field.Name #> { get; set; }

<# } #>

<#
	if (chunk.Fields.Count > 0)
	{
#>
		/// <summary>
		///   Initializes a new instance of the <see cref="<#= className #>" /> class with the specified value.
		/// </summary>
<#
	foreach (Field field in chunk.Fields)
	{
#>
		/// <param name="<#= FirstCharToLowerCase(field.Name) #>">The parameter that assigns <see cref="<#= field.Name #>" /> directly.</param>
<# } #>
		public <#= className #>(<#= string.Join(", ", chunk.Fields.Select(x => $"{x.Type} {FirstCharToLowerCase(x.Name)}")) #>)
		{
<#
	foreach (Field field in chunk.Fields)
	{
#>
			this.<#= field.Name #> = <#= FirstCharToLowerCase(field.Name) #>;
<# } #>
		}
<# } #>

		/// <summary>
		///   Initializes a new instance of the <see cref="<#= className #>" /> class.
		/// </summary>
		public <#= className #>()
		{
		}

		/// <inheritdoc cref="object.Equals(object?)" />
		public override bool Equals(object? other)
		{
			return other is <#= className #> val
<#
	foreach (Field field in chunk.Fields)
	{
#>
				&& EqualityComparer<<#= field.Type #>?>.Default.Equals(this.<#= field.Name #>, val.<#= field.Name #>)
<# } #>
				;
		}

		/// <inheritdoc cref="object.GetHashCode" />
		public override int GetHashCode()
		{
			unchecked
			{
				int hash = 17;
<#
	foreach (Field field in chunk.Fields)
	{
#>
				hash = hash * 23 + (<#= field.Name #>?.GetHashCode() ?? 0);
<# } #>
				return hash;
			}
		}

		/// <inheritdoc cref="IEquatable{T}.Equals" />
		public bool Equals(<#= className #>? other) => Equals((object?)other);
	}
<# } #>

	/// <summary>
	///   Methods for method-chained mutation of properties within WebP chunks.
	/// </summary>
	public static class FluentChunkExtensions
	{
<#
	foreach (Chunk chunk in _chunks)
	{
		string className = $"Webp{chunk.Name}Chunk";
		foreach (Field field in chunk.Fields)
		{
#>
		/// <summary>
		///   Changes the <see cref="<#= className #>.<#= field.Name #>" /> property inside
		///   the given <paramref name="sourceChunk" /> parameter.
		/// </summary>
		/// <param name="sourceChunk">Input WebP chunk</param>
		/// <param name="valueToReplaceWith">The value to replace with</param>
		/// <returns>
		///   <paramref name="sourceChunk" /> with the new <see cref="<#= className #>.<#= field.Name #>" />
		///   property.
		/// </returns>
		public static <#= className #> With<#= field.Name #>(
			this <#= className #> sourceChunk,
			<#= field.Type #> valueToReplaceWith)
		{
			sourceChunk.<#= field.Name #> = valueToReplaceWith;
			return sourceChunk;
		}

<# } } #>
	}
}

namespace ContentDotNet.Extensions.Image.Webp.Chunks.Utilities
{
	using ContentDotNet.Extensions.Image.Webp.Chunks;
	
	/// <summary>
	///   Create WebP chunks from just their 4 character code.
	/// </summary>
	public static class BuiltInNameToChunkFactory
	{
		/// <summary>
		///   The keys are box four-character-codes and the values are factories to create that chunk. Example:
		///   <code>
		///     WebpChunkBase chunkData = BuiltInNameToChunkFactory
	    ///			.DataFactoryTable["VP8 "]();
		///     WebpVp8Chunk vp8 = (WebpVp8Chunk)chunkData;
		///     // ...
		///   </code>
		/// </summary>
		public static readonly Dictionary<string, Func<WebpChunkBase>> DataFactoryTable = new()
		{
<#
	foreach (Chunk chunk in _chunks)
	{
		string className = $"Webp{chunk.Name}Chunk";
#>
			["<#= chunk.Fcc #>"] = () => new <#= className #>(),
<# } #>
		};
	}
}

<#+
class Chunk {
	public string Name;
	public string Fcc;
	public List<Field> Fields = new List<Field>();
	public string ClassName;

	public Chunk F(string type, string name) {
		Fields.Add(new Field() { Type = type, Name = name });
		return this;
	}

	public Chunk C(string className) {
		ClassName = className;
		return this;
	}
}

class Field {
	public string Type;
	public string Name;
}

private readonly List<Chunk> _chunks = new List<Chunk>();

private Chunk C(string name, string fcc) {
	var chunk = new Chunk() {
		Name = name,
		Fcc = fcc
	};
	_chunks.Add(chunk);
	return chunk;
}

public static string FirstCharToLowerCase(string str)
{
	// https://stackoverflow.com/a/21755803/21072788
	string newString = str;
	if (!String.IsNullOrEmpty(newString))
		newString = Char.ToLower(newString[0]) + newString.Substring(1);
	return newString;
}
#>
