<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
#nullable enable

namespace ContentDotNet.Extensions.Video.Mp4.Boxes.Data
{
	using ContentDotNet.Extensions.Video.Mp4.Annotations;

<#
	B("ReceivedSsrc", "rssr").F("uint", "Ssrc");
	B("TimestampSynchronization", "tssy").F("byte", "Reserved").F("byte", "TimestampSync");
	B("TimescaleEntry", "tims").F("uint", "Timescale");
	B("TimeOffset", "tsro").F("uint", "Offset");
	B("SequenceOffset", "snro").F("uint", "Offset");
	B("TotalBytesSentIncluding12ByteRtpHeaders", "trpy").F("ulong", "BytesSent");
	B("TotalPacketsSent", "nump").F("ulong", "PacketsSent");
	B("TotalBytesSentNotIncludingRtpHeaders", "tpyl").F("ulong", "BytesSent");
	B("TotalBytesSentIncluding12ByteRtpHeaders32", "totl").F("uint", "BytesSent");
	B("TotalPacketsSent32", "npck").F("uint", "PacketsSent");
	B("TotalBytesSentNotIncludingRtpHeaders32", "tpay").F("uint", "BytesSent");
	B("MaximumDataRate", "maxr").F("uint", "Period").F("uint", "Bytes");
	B("TotalBytesSentFromMediaTracks", "dmed").F("ulong", "BytesSent");
	B("TotalBytesSentImmediateMode", "dimm").F("ulong", "BytesSent");
	B("TotalBytesInRepeatedPackets", "drep").F("ulong", "BytesSent");
	B("SmallestRelativeTransmittionTimeMilliseconds", "tmin").F("uint", "Time");
	B("LargestRelativeTransmittionTimeMilliseconds", "tmax").F("uint", "Time");
	B("LargestPacketSentIncludingRtpHeader", "pmax").F("uint", "Bytes");
	B("LongestPacketDurationInMilliseconds", "dmax").F("uint", "Time");
	B("PayloadIdUsedInRtpPackets", "payt").F("uint", "PayloadId");
	B("@StereoVideoInfo", "stvi").F("uint", "Reserved").F("uint", "SingleViewAllowed").F("uint", "StereoScheme").F("uint", "Length").F("byte[]", "StereoIndicationType").F("IList<Mp4Box>", "AnyBox");
	B("@ExtendedLanguage", "elng").F("string", "ExtendedLanguage");
	B("BitRateInformation", "btrt").F("uint", "BufferSizeDb").F("uint", "MaxBitRate").F("uint", "AverageBitRate");
	B("PixelAspectRatio", "pasp").F("uint", "HSpacing").F("uint", "VSpacing");
	B("CleanAperture", "clap").F("uint", "CleanApertureWidthN").F("uint", "CleanApertureWidthD").F("uint", "CleanApertureHeightN").F("uint", "CleanApertureHeightD").F("uint", "HorizOffN").F("uint", "HorizOffD").F("uint", "VertOffN").F("uint", "VertOffD");
	B("ContentColourVolume", "cclv").F("bool", "Reserved1").F("bool", "Reserved2").F("bool", "CcvPrimariesPresentFlag").F("bool", "CcvMinLuminanceValuePresentFlag").F("bool", "CcvMaxLuminanceValuePresentFlag").F("bool", "CcvAvgLuminanceValuePresentFlag").F("uint", "CcvReservedZero2Bits").F("IList<uint>", "CcvPrimariesX").F("IList<uint>", "CcvPrimariesY").F("uint", "CcvMinLuminanceValue").F("uint", "CcvMaxLuminanceValue").F("uint", "CcvAvgLuminanceValue");
	B("ColorInformation", "colr").F("uint", "ColourType").F("ushort", "ColourPrimaries").F("ushort", "TransferCharacteristics").F("ushort", "MatrixCoefficients").F("bool", "FullRangeFlag").F("uint", "Reserved");
	B("ContentLightLevel", "clli").F("ushort", "MaxContentLightLevel").F("ushort", "MaxPicAverageLightLevel");
	B("MasteringDisplayColourVolume", "mdcv").F("ushort[]", "DisplayPrimariesX").F("ushort[]", "DisplayPrimariesY").F("ushort", "WhitePointX").F("ushort", "WhitePointY").F("uint", "MaxDisplayMasteringLuminance").F("uint", "MinDisplayMasteringLuminance");
	B("ScrambleSchemeInfo", "scrb").F("Mp4Box", "SchemeTypeBox").F("Mp4Box", "Info");
	B("SamplingRate", "srat").F("uint", "SamplingRate");
	B("TextStreamConfiguration", "txtC").F("string", "TextConfig");
	B("@UriInformation", "uriI").F("byte[]", "UriInitializationData");
	B("@Copyright", "cprt").F("bool", "Pad").F("byte[]", "Language").F("string", "Notice");
	B("@TrackKind", "kind").F("string", "SchemeUri").F("string", "Value");
	B("@TrackSelection", "tsel").F("int", "SwitchGroup").F("uint[]", "AttributeList");
	B("SubTrack", "strk");
	B("HintInformation", "hnti");
	B("SdpInformation", "sdp ").F("string", "SdpText");
	B("RtpInformation", "rtp ").F("uint", "DescriptionFormat").F("string", "SdpText");
	B("HintStatistics", "hinf");
	B("Url", "url ").F("uint", "Flags").F("string", "Location");
	B("Urn", "urn ").F("uint", "Flags").F("string", "Name").F("string", "Location");
	B("IdentifiedMediaDataImdt", "imdt").F("uint", "Flags").F("uint", "ImdaRefIdentifier");
	B("SequenceNumberIdentifiedMediaData", "snim").F("uint", "Flags");
	B("ItemPropertyContainer", "ipco").F("IList<Mp4Box>", "Properties");
	B("@ItemPropertyAssociation", "ipma").F("uint", "EntryCount").F("IList<uint>", "ItemId").F("IList<byte>", "AssociationCount").F("IList<IList<bool>>", "Essential").F("IList<IList<ushort>>", "PropertyIndex");
	B("ItemProperties", "iprp").F("IList<Mp4Box>", "PropertyContainer").F("IList<Mp4Box>", "Association");
	B("@ActiveSequenceStartupProperties", "assp").F("int", "MinInitialStartupOffset").F("uint", "NumEntries").F("uint[]", "GroupingTypeParameter").F("uint[]", "MinInitialStartupOffset2");
	B("@BinaryXml", "bxml").F("byte[]", "Data");
	B("CompleteTrackInformation", "cinf").F("Mp4Box", "OriginalFormat");
	B("@ChunkLargeOffset", "co64").F("uint", "EntryCount").F("IList<ulong>", "ChunkOffset");
	B("@CompositionToDecodeTimelineMapping", "cslg").F("long", "CompositionToDtsShift").F("long", "LeastDecodeToDisplayDelta").F("long", "GreatestDecodeToDisplayDelta").F("long", "CompositionStartTime").F("long", "CompositionEndTime");
	B("@CompositionTimeToSample", "ctts").F("uint", "EntryCount").F("IList<uint>", "SampleCount").F("IList<int>", "SampleOffset");
	B("!DataInformation", "dinf");
	B("DataReference", "dref").F("uint", "EntryCount").F("IList<Mp4Box>", "Boxes");
	B("EditListContainer", "edts");
	B("@EditList", "elst").F("uint", "EntryCount").F("IList<ulong>", "EditDuration").F("IList<ulong>", "MediaTime").F("IList<short>", "MediaRateInteger").F("IList<short>", "MediaRateFraction");
	B("ExtendedType", "etyp").F("IList<Mp4Box>", "CompatibleCombinations");
	B("FileDeliveryInformation", "fdel").F("string", "ContentLocation").F("string", "ContentMd5").F("ulong", "ContentLength").F("ulong", "TransferLength").F("byte", "EntryCount").F("IList<uint>", "GroupId");
	B("@FecReservoir", "fecr").F("uint", "EntryCount").F("IList<uint>", "ItemId").F("IList<uint>", "SymbolCount");
	B("FreeSpace", "free").F("IList<byte>", "Data");
	B("GroupIdToName", "gitn").F("ushort", "EntryCount").F("IList<uint>", "GroupId").F("IList<string>", "GroupName");
	B("GroupsList", "grpl");
	B("@Handler", "hdlr").F("uint", "Predefined").F("uint", "HandlerType").F("IList<uint>", "Reserved").F("string", "Name");
	B("@HintMediaHeader", "hmhd").F("ushort", "MaxPduSize").F("ushort", "AvgPduSize").F("uint", "MaxBitRate").F("uint", "AvgBitRate").F("uint", "Reserved");
	B("ItemData", "idat").F("byte[]", "Data");
	B("@ItemInformation", "iinf").F("uint", "EntryCount").F("IList<Mp4Box>", "ItemInfos");
	B("IdentifiedMediaDataImda", "imda").F("uint", "ImdaIdentifier").F("byte[]", "Data");
	B("@ItemProtection", "ipro").F("ushort", "ProtectionCount").F("IList<Mp4Box>", "ProtectionInformation");
	B("@ItemReference", "iref").F("IList<Mp4Box>", "Boxes");
	B("MediaData", "mdat").F("Stream", "RawData");
	B("@MediaHeader", "mdhd").F("ulong", "CreationTime").F("ulong", "ModificationTime").F("uint", "Timescale").F("ulong", "Duration").F("bool", "Pad").F("IList<uint>", "Language").F("ushort", "Predefined");
	B("!Media", "mdia");
	B("MovieExtendsHeader", "mehd").F("ulong", "FragmentDuration");
	B("@MetaBox", "meta").F("IList<Mp4Box>", "Boxes");
	B("@MovieFragmentHeader", "mfhd").F("uint", "SequenceNumber");
	B("MovieFragmentRandomAccess", "mfra");
	B("@MovieFragmentRandomAccessOffset", "mfro").F("uint", "ParentSize");
	B("MediaInformation", "minf").F("IList<Mp4Box>", "Children");
	B("!MovieFragment", "moof"); // Moo indeed
	B("!Movie", "moov"); // Moo indeed
	B("!MovieExtends", "mvex");
	B("!MovieHeader", "mvhd");
	B("@NullMediaHeader", "nmhd");
	B("OriginalFileTypeBox", "otyp");
	B("@SamplePaddingBits", "padb").F("uint", "SampleCount").F("IList<bool>", "Reserved1").F("IList<byte>", "Pad1").F("IList<bool>", "Reserved2").F("IList<byte>", "Pad2");
	B("@ProgressiveDownloadInformation", "pdin").F("IList<uint>", "Rate").F("IList<uint>", "InitialDelay");
	B("@PrimaryItemReference", "pitm").F("uint", "ItemId");
	B("@ProducerReferenceTime", "prft").F("uint", "ReferenceTrackId").F("ulong", "NtpTimestamp").F("ulong", "MediaTime");
	B("RestrictedSchemeInformation", "rinf").F("Mp4Box", "OriginalFormat").F("Mp4Box", "SchemeTypeBox").F("Mp4Box", "Info");
	B("@SampleAuxiliaryInformationOffsets", "saio").F("uint", "AuxInfoType").F("uint", "AuxInfoTypeParameter").F("uint", "EntryCount").F("IList<ulong>", "Offsets");
	B("@SampleAuxiliaryInformationSize", "saiz").F("uint", "AuxInfoType").F("uint", "AuxInfoTypeParameter").F("byte", "DefaultSampleInfoSize").F("uint", "SampleCount").F("IList<byte>", "SampleInfoSize");
	B("@SampleToGroup", "sbgp").F("uint", "GroupingType").F("uint", "GroupingTypeParameter").F("uint", "EntryCount").F("IList<uint>", "SampleCount").F("IList<uint>", "GroupDescriptionIndex");
	B("SchemeInformation", "schi").F("IList<Mp4Box>", "Children");
	B("@SchemeType", "schm").F("uint", "SchemeType").F("uint", "SchemeVersion").F("string", "SchemeUri");
	B("@CompatibleSchemeType", "csch").F("uint", "SchemeType").F("uint", "SchemeVersion").F("string", "SchemeUri");
	B("@SampleDependencyType", "sdtp").F("IList<byte>", "IsLeading").F("IList<byte>", "SampleDependsOn").F("IList<byte>", "SampleIsDependedOn").F("IList<byte>", "SampleHasRedundancy");
	B("SegmentIndex", "sidx");
	B("FreeSpaceSkip", "skip").F("Stream", "RawData");
	B("@SoundMediaHeader", "smhd").F("ushort", "Balance").F("ushort", "Reserved");
	B("@StrpProcess", "srpp").F("uint", "EncryptionAlgorithmRtp").F("uint", "EncryptionAlgorithmRtcp").F("uint", "IntegrityAlgorithmRtp").F("uint", "IntegrityAlgorithmRtcp").F("Mp4Box", "SchemeTypeBox").F("Mp4Box", "Info");
	B("SubsampleIndex", "ssix");
	B("!SampleTable", "stbl");
	B("ChunkOffset", "stco").F("uint", "EntryCount").F("IList<uint>", "ChunkOffset");
	B("SampleDegradationPriority", "stdp").F("IList<ushort>", "Priority");
	B("@SubtitleMediaHeader", "sthd");
	B("SubTrackDefinitionBox", "strd");
	B("@SubTrackInformation", "stri").F("short", "SwitchGroup").F("short", "AlternateGroup").F("uint", "SubTrackId").F("IList<uint>", "AttributeList");
	B("@SampleToChunk", "stsc").F("uint", "EntryCount").F("IList<uint>", "FirstChunk").F("IList<uint>", "SamplesPerChunk").F("IList<uint>", "SampleDescriptionIndex");
	B("@SampleDescription", "stsd").F("uint", "EntryCount").F("IList<Mp4Box>", "SampleEntries");
	B("@SubtrackSampleGrouping", "stsg").F("uint", "GroupingType").F("ushort", "ItemCount").F("IList<uint>", "GroupDescriptionIndex");
	B("@ShadowSyncSampleTable", "stsh").F("uint", "EntryCount").F("IList<uint>", "ShadowedSampleNumber").F("IList<uint>", "SyncSampleNumber");
	B("@SyncSampleTable", "stss").F("uint", "EntryCount").F("IList<uint>", "SampleNumber");
	B("@SampleSize", "stsz").F("uint", "SampleSize").F("uint", "SampleCount").F("IList<uint>", "EntrySize");
	B("@TimeToSample", "stts").F("uint", "EntryCount").F("IList<uint>", "SampleCount").F("IList<uint>", "SampleDelta");
	B("@TrackFrameDecodeTime", "tfdt").F("ulong", "BaseMediaDecodeTime");
	B("@TrackHeader", "tkhd").F("ulong", "CreationTime").F("ulong", "ModificationTime").F("uint", "TrackId").F("uint", "Reserved").F("ulong", "Duration");
	B("!TrackFragment", "traf");
	B("!Track", "trak");
	B("TrackReferenceContainer", "tref").F("IList<Mp4Box>", "Boxes");
	B("@TrackExtensionProperties", "trep").F("uint", "TrackId").F("IList<Mp4Box>", "Boxes");
	B("@TrackExtends", "trex").F("uint", "TrackId").F("uint", "DefaultSampleDescriptionIndex").F("uint", "DefaultSampleDuration").F("uint", "DefaultSampleSize").F("uint", "DefaultSampleFlags");
	B("TrackGroupingInformation", "trgr");
	B("TypeAndCombination", "tyco").F("IList<uint>", "CompatibleBrands");
	B("!UserData", "udta");
	B("@VideoMediaHeader", "vmhd").F("ushort", "GraphicsMode").F("IList<ushort>", "TopColor");
	B("@XmlContainer", "xml ").F("string", "Xml");
	B("@Uri", "uri ").F("string", "Uri");

	foreach (Box box in _boxes)
	{
		bool isFull = box.Name.Contains('@');
		if (isFull)
			box.Name = box.Name.Replace("@", string.Empty);
		bool hasChildren = box.Name.Contains('!'); // The entire box data consists of just inner boxes?
		if (hasChildren)
			box.Name = box.Name.Replace("!", string.Empty);
		string baseInterface = isFull ? "IMp4FullBoxData" : "IMp4BoxData";
		if (isFull)
		{
			box.F("byte", "Version").F("uint", "Flags");
		}
		if (hasChildren)
		{
			box.F("IList<Mp4Box>", "Children");
		}
		string className = $"Mp4{box.Name}BoxData";

#>

	/// <summary>
	///   The MP4 <c><#= box.Fcc #></c> box data representation.
	/// </summary>
	[FourCC("<#= box.Fcc #>")]
	public class <#= className #> : <#= baseInterface #>, IEquatable<<#= className #>?>
	{
		/// <inheritdoc cref="IMp4BoxData.Parent" />
		public Mp4Box? Parent { get; set; } = null;
<#
	foreach (Field field in box.Fields)
	{
#>
	
		/// <summary>
		///   Represents one of MP4 box properties, named, <#= field.Name #>.
		/// </summary>
		public <#= field.Type #>? <#= field.Name #> { get; set; }

<# } #>

<#
	if (box.Fields.Count > 0)
	{
#>
		/// <summary>
		///   Initializes a new instance of the <see cref="<#= className #>" /> class with the specified value.
		/// </summary>
<#
	foreach (Field field in box.Fields)
	{
#>
		/// <param name="<#= FirstCharToLowerCase(field.Name) #>">The parameter that assigns <see cref="<#= field.Name #>" /> directly.</param>
<# } #>
		public <#= className #>(<#= string.Join(", ", box.Fields.Select(x => $"{x.Type} {FirstCharToLowerCase(x.Name)}")) #>)
		{
<#
	foreach (Field field in box.Fields)
	{
#>
			this.<#= field.Name #> = <#= FirstCharToLowerCase(field.Name) #>;
<# } #>
		}
<# } #>

		/// <summary>
		///   Initializes a new instance of the <see cref="<#= className #>" /> class.
		/// </summary>
		public <#= className #>()
		{
		}

		/// <inheritdoc cref="object.Equals(object?)" />
		public override bool Equals(object? other)
		{
			return other is <#= className #> val
<#
	foreach (Field field in box.Fields)
	{
#>
				&& EqualityComparer<<#= field.Type #>?>.Default.Equals(this.<#= field.Name #>, val.<#= field.Name #>)
<# } #>
				;
		}

		/// <inheritdoc cref="object.GetHashCode" />
		public override int GetHashCode()
		{
			unchecked
			{
				int hash = 17;
<#
	foreach (Field field in box.Fields)
	{
#>
				hash = hash * 23 + (<#= field.Name #>?.GetHashCode() ?? 0);
<# } #>
				return hash;
			}
		}

		/// <inheritdoc cref="IEquatable{T}.Equals" />
		public bool Equals(<#= className #>? other) => Equals((object?)other);
	}
<# } #>

	/// <summary>
	///   Methods for method-chained mutation of properties within MP4 boxes.
	/// </summary>
	public static class FluentBoxExtensions
	{
<#
	foreach (Box box in _boxes)
	{
		string className = $"Mp4{box.Name}BoxData";
		foreach (Field field in box.Fields)
		{
#>
		/// <summary>
		///   Changes the <see cref="<#= className #>.<#= field.Name #>" /> property inside
		///   the given <paramref name="sourceBox" /> parameter.
		/// </summary>
		/// <param name="sourceBox">Input MP4 box</param>
		/// <param name="valueToReplaceWith">The value to replace with</param>
		/// <returns>
		///   <paramref name="sourceBox" /> with the new <see cref="<#= className #>.<#= field.Name #>" />
		///   property.
		/// </returns>
		public static <#= className #> With<#= field.Name #>(
			this <#= className #> sourceBox,
			<#= field.Type #> valueToReplaceWith)
		{
			sourceBox.<#= field.Name #> = valueToReplaceWith;
			return sourceBox;
		}

<# } } #>
	}
}

namespace ContentDotNet.Extensions.Video.Mp4.Boxes.Data.Utilities
{
	using ContentDotNet.Extensions.Video.Mp4.Boxes.Data;
	
	/// <summary>
	///   Create MP4 boxes from just their 4 character code.
	/// </summary>
	public static class BuiltInNameToBoxFactory
	{
		/// <summary>
		///   The keys are box four-character-codes and the values are factories to create that box. Example:
		///   <code>
		///     IMp4BoxData boxData = BuiltInNameToBoxFactory
	    ///			.DataFactoryTable["moov"]();
		///     Mp4MovieBoxData moov = (Mp4MovieBoxData)boxData;
		///     // ...
		///   </code>
		/// </summary>
		public static readonly Dictionary<string, Func<IMp4BoxData>> DataFactoryTable = new()
		{
<#
	foreach (Box box in _boxes)
	{
		string className = $"Mp4{box.Name}BoxData";
#>
			["<#= box.Fcc #>"] = () => new <#= className #>(),
<# } #>
		};
	}
}

<#+
class Box {
	public string Name;
	public string Fcc;
	public List<Field> Fields = new List<Field>();

	public Box F(string type, string name) {
		Fields.Add(new Field() { Type = type, Name = name });
		return this;
	}
}

class Field {
	public string Type;
	public string Name;
}

private readonly List<Box> _boxes = new List<Box>();

private Box B(string name, string fcc) {
	var box = new Box() {
		Name = name,
		Fcc = fcc
	};
	_boxes.Add(box);
	return box;
}

public static string FirstCharToLowerCase(string str)
{
	// https://stackoverflow.com/a/21755803/21072788
	string newString = str;
	if (!String.IsNullOrEmpty(newString))
		newString = Char.ToLower(newString[0]) + newString.Substring(1);
	return newString;
}
#>
