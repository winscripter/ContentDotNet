<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
namespace ContentDotNet.Extensions.Video.Mp4.Boxes.IO
{
    using ContentDotNet.Binary;
    using ContentDotNet.Extensions.Video.Mp4.Boxes.Data;

<#
    Box("Track");
    Box("TrackFragment");
    Box("SampleTable");
    Box("SchemeInformation");
    Box("MovieExtends");
    Box("Movie");
    Box("MovieFragment");
    Box("MediaInformation");
    Box("Media");
    Box("DataInformation");

    foreach (string box in _boxes)
    {
#>
    /// <summary>
    ///   IO class for Mp4<#= box #>BoxData
    /// </summary>
    public class Mp4<#= box #>BoxIO : Mp4BoxIO
    {
        /// <summary>
        ///   Singleton instance of Mp4<#= box #>BoxIO
        /// </summary>
        public static readonly Mp4<#= box #>BoxIO Instance = new Mp4<#= box #>BoxIO();

        /// <inheritdoc cref="Mp4BoxIO.TypeOfBoxData" />
        public override Type TypeOfBoxData => typeof(Mp4<#= box #>BoxData);

        /// <inheritdoc cref="Mp4BoxIO.ReadBoxData" />
        public override void ReadBoxData(Mp4Box box, BinaryReader stream)
        {
            var children = new List<Mp4Box>();
            long initPos = stream.BaseStream.Position;
            while (initPos < (initPos + (box.Size - 8)))
                children.Add(Mp4Box.Read(stream, box.FourCCToIO));
            box.Data = new Mp4<#= box #>BoxData(children);
        }
        
        /// <inheritdoc cref="Mp4BoxIO.ReadBoxDataAsync" />
        public override async Task ReadBoxDataAsync(Mp4Box box, BinaryReader stream)
        {
            var children = new List<Mp4Box>();
            long initPos = stream.BaseStream.Position;
            while (initPos < (initPos + (box.Size - 8)))
                children.Add(await Mp4Box.ReadAsync(stream, box.FourCCToIO));
            box.Data = new Mp4<#= box #>BoxData(children);
        }
        
        /// <inheritdoc cref="Mp4BoxIO.WriteBoxData" />
        public override void WriteBoxData(Mp4Box box, BinaryWriter stream)
        {
            foreach (Mp4Box b in ((Mp4<#= box #>BoxData)box.Data).Children)
                b.Write(stream);
        }

        /// <inheritdoc cref="Mp4BoxIO.WriteBoxDataAsync" />
        public override async Task WriteBoxDataAsync(Mp4Box box, BinaryWriter stream)
        {
            foreach (Mp4Box b in ((Mp4<#= box #>BoxData)box.Data).Children)
                await b.WriteAsync(stream);
        }
    }

<# } #>
}

<#+
private readonly List<string> _boxes = new List<string>();

private void Box(string name)
{
    if (_boxes.Contains(name))
        return;
    _boxes.Add(name);
}
#>
