IOC BEGIN rssr
    unsigned int(32)    SSRC
IOC END

IOC BEGIN tssy
    unsigned int(6) reserved
    unsigned int(2) timestamp_sync
IOC END

IOC BEGIN tims
    uint(32)    timescale
IOC END

IOC BEGIN tsro
    int(32)        offset
IOC END

IOC BEGIN snro
    int(32)        offset
IOC END

IOC BEGIN trpy
    uint(64)    bytessent
IOC END

IOC BEGIN nump
    uint(64)    packetssent
IOC END

IOC BEGIN tpyl
    uint(64)    bytessent
IOC END

IOC BEGIN totl
    uint(32)    bytessent
IOC END

IOC BEGIN npck
    uint(32)    packetssent
IOC END

IOC BEGIN tpay
    uint(32)    bytessent
IOC END

IOC BEGIN maxr
    uint(32)    period
    uint(32)    bytes
IOC END

IOC BEGIN dmed
    uint(64)    bytessent
IOC END

IOC BEGIN dimm
    uint(64)    bytessent
IOC END

IOC BEGIN drep
    uint(64)    bytessent
IOC END

IOC BEGIN tmin
    int(32)        time
IOC END

IOC BEGIN tmax
    int(32)        time
IOC END

IOC BEGIN pmax
    uint(32)    bytes
IOC END

IOC BEGIN dmax
    uint(32)    time
IOC END

IOC BEGIN payt
    uint(32)    payloadID
    uint(8)        count
    char        rtpmap_string[count]
IOC END

IOC BEGIN stvi
    uint(8)        version
    uint(24)        flags
    unsigned int(30) reserved
    unsigned int(2)    single_view_allowed
    unsigned int(32)    stereo_scheme
    unsigned int(32)    length
    unsigned int(8)[length]    stereo_indication_type
    Box any_box[]
IOC END

IOC BEGIN elng
    uint(8)        version
    uint(24)        flags
    utf8string    extended_language
IOC END

IOC BEGIN btrt
    unsigned int(32) bufferSizeDB
    unsigned int(32) maxBitrate
    unsigned int(32) avgBitrate
IOC END

IOC BEGIN pasp
    unsigned int(32) hSpacing
    unsigned int(32) vSpacing
IOC END

IOC BEGIN clap
    unsigned int(32) cleanApertureWidthN
    unsigned int(32) cleanApertureWidthD
    unsigned int(32) cleanApertureHeightN
    unsigned int(32) cleanApertureHeightD
    unsigned int(32) horizOffN
    unsigned int(32) horizOffD
    unsigned int(32) vertOffN
    unsigned int(32) vertOffD
IOC END

IOC BEGIN cclv
    unsigned int(1) reserved1
    unsigned int(1) reserved2
    unsigned int(1) ccv_primaries_present_flag
    unsigned int(1) ccv_min_luminance_value_present_flag
    unsigned int(1) ccv_max_luminance_value_present_flag
    unsigned int(1) ccv_avg_luminance_value_present_flag
    unsigned int(2) ccv_reserved_zero_2bits = 0
    if( ccv_primaries_present_flag ) {
        for( c = 0; c < 3; c++ ) {
            signed int(32) ccv_primaries_x
            signed int(32) ccv_primaries_y
        }
    }
    if( ccv_min_luminance_value_present_flag )
        unsigned int(32) ccv_min_luminance_value
    if( ccv_max_luminance_value_present_flag )
         unsigned int(32) ccv_max_luminance_value
    if( ccv_avg_luminance_value_present_flag )
         unsigned int(32) ccv_avg_luminance_value
IOC END

IOC BEGIN colr
    unsigned int(32) colour_type
    if (colour_type == 0x6E636C78) {
        unsigned int(16) colour_primaries
        unsigned int(16) transfer_characteristics
        unsigned int(16) matrix_coefficients
        unsigned int(1)  full_range_flag
        unsigned int(7)  reserved
    }
IOC END

IOC BEGIN clli
    unsigned int(16) max_content_light_level
    unsigned int(16) max_pic_average_light_level
IOC END

IOC BEGIN mdcv
    for (c = 0; c<3; c++) {
        unsigned int(16) display_primaries_x
        unsigned int(16) display_primaries_y
    }
    unsigned int(16) white_point_x
    unsigned int(16) white_point_y
    unsigned int(32) max_display_mastering_luminance
    unsigned int(32) min_display_mastering_luminance
IOC END

IOC BEGIN scrb
    Box scheme_type_box
    Box info?
IOC END

IOC BEGIN srat
    unsigned int(32) sampling_rate
IOC END

IOC BEGIN txtC
    uint(8) version
    uint(24) flags
    utf8string text_config
IOC END

IOC BEGIN uriI
    uint(8) version
    uint(24) flags
    unsigned int(8) uri_initialization_data[]
IOC END

IOC BEGIN cprt
    uint(8) version
    uint(24) flags
    bit(1) pad
    unsigned int(5)[3] language
IOC END

IOC BEGIN kind
    uint(8) version
    uint(24) flags
    utf8string schemeURI
    utf8string value
IOC END

IOC BEGIN tsel
    uint(8) version
    uint(24) flags
    int(32) switch_group
    unsigned int(32) attribute_list[]
IOC END

IOC BEGIN strk
    Box children[]
IOC END

IOC BEGIN sdp 
    char sdptext[]
IOC END

IOC BEGIN rtp 
    uint(32) descriptionformat
    char  sdptext[]
IOC END

IOC BEGIN rtp 
    utf8string location
IOC END

IOC BEGIN url 
    uint(24) flags
    utf8string location
IOC END

IOC BEGIN urn 
    uint(24) flags
    utf8string name
    utf8string location
IOC END

IOC BEGIN imdt
    uint(24) flags
    unsigned int(32) imda_ref_identifier
IOC END

IOC BEGIN snim
    uint(24) flags
IOC END

IOC BEGIN ipco
    Box properties[]
IOC END

IOC BEGIN ipma
    uint(8) version
    uint(24) flags
    unsigned int(32) entry_count
    for(i = 0; i < entry_count; i++) {
        if (version < 1) {
            unsigned int(16)    item_ID
        }
        else {
            unsigned int(32)    item_ID
        }
        unsigned int(8) association_count
        for (i=0; i<association_count; i++) {
            bit(1) essential
            if (flags & 1) {
                unsigned int(15) property_index
            }
            else {
                unsigned int(7) property_index
            }
        }
    }
IOC END

IOC BEGIN iprp
    Box property_container
    Box association[]
IOC END

IOC BEGIN assp
    uint(8) version
    uint(24) flags
    if (version == 0) {
        signed int(32)        min_initial_alt_startup_offset
    }
    else {
        if (version == 1) {
            unsigned int(32)    num_entries
            for (j=1; j <= num_entries; j++) {
                unsigned int(32)    grouping_type_parameter
                signed int(32)        min_initial_alt_startup_offset2
            }
        }
    }
IOC END

IOC BEGIN bxml
    uint(8) version
    uint(24) flags
    unsigned int(8) data[]
IOC END

IOC BEGIN cinf
    Box original_format
IOC END

IOC BEGIN co64
    uint(8) version
    uint(24) flags
    unsigned int(32)    entry_count
    for (i=1; i <= entry_count; i++) {
        unsigned int(64)    chunk_offset
    }
IOC END

IOC BEGIN cslg
    if (version==0) {
        signed int(32)    compositionToDTSShift
        signed int(32)    leastDecodeToDisplayDelta
        signed int(32)    greatestDecodeToDisplayDelta
        signed int(32)    compositionStartTime
        signed int(32)    compositionEndTime
    } else {
        signed int(64)    compositionToDTSShift
        signed int(64)    leastDecodeToDisplayDelta
        signed int(64)    greatestDecodeToDisplayDelta
        signed int(64)    compositionStartTime
        signed int(64)    compositionEndTime
    }
IOC END

IOC BEGIN ctts
    unsigned int(32)    entry_count
    for (i=0; i < entry_count; i++) {
        unsigned int(32)    sample_count
        unsigned int(32)    sample_offset
    }
IOC END

IOC BEGIN dinf
    Box children[]
IOC END

IOC BEGIN dref
    uint(8) version
    uint(24) flags
    unsigned int(32)    entry_count
    for (i=1; i <= entry_count; i++) {
        Box    data_entry
    }
IOC END

IOC BEGIN edts
    Box children[]
IOC END

IOC BEGIN elst
    unsigned int(32)    entry_count;
    for (i=1; i <= entry_count; i++) {
        if (version==1) {
            unsigned int(64) edit_duration
            int(64) media_time;
        } else {
            unsigned int(32) edit_duration
            int(32)    media_time
        }
        int(16) media_rate_integer
        int(16) media_rate_fraction
    }
IOC END

IOC BEGIN etyp
    Box children[]
IOC END

IOC BEGIN fecr
    if (version == 0) {
        unsigned int(16)    entry_count
    } else {
        unsigned int(32)    entry_count
    }
    for (i=1; i <= entry_count; i++) {
        if (version == 0) {
            unsigned int(16)    item_ID
        } else {
            unsigned int(32)    item_ID
        }
        unsigned int(32)    symbol_count
    }
IOC END

IOC BEGIN free
    unsigned int(8) data[]
IOC END

IOC BEGIN ftyp
IOC END

IOC BEGIN gitn
    uint(8) version
    uint(24) flags
    unsigned int(16)    entry_count
    for (i=1; i <= entry_count; i++) {
        unsigned int(32)    group_ID
        utf8string            group_name
    }
IOC END

IOC BEGIN hdlr
    uint(8) version
    uint(24) flags
    unsigned int(32)    pre_defined
    unsigned int(32)    handler_type
    unsigned int(32)[3]    reserved
    utf8string    name
IOC END

IOC BEGIN hmhd
    uint(8) version
    uint(24) flags
    unsigned int(16)    maxPDUsize
    unsigned int(16)    avgPDUsize
    unsigned int(32)    maxbitrate
    unsigned int(32)    avgbitrate
    unsigned int(32)    reserved
IOC END

IOC BEGIN idat
    uint(8) data[]
IOC END

IOC BEGIN mdat
    uint(8) data[]
IOC END

IOC BEGIN mdia
    Box children[]
IOC END

IOC BEGIN mehd
    uint(8) version
    uint(24) flags
    if (version == 1) {
        unsigned int(64)    fragment_duration
    } else {
        unsigned int(32)    fragment_duration
    }
IOC END

IOC BEGIN mfhd
    uint(8) version
    uint(24) flags
    unsigned int(32)    sequence_number
IOC END

IOC BEGIN mfro
    uint(8) version
    uint(24) flags
    unsigned int(32) parent_size
IOC END

IOC BEGIN minf
    Box children[]
IOC END

IOC BEGIN moof
    Box children[]
IOC END

IOC BEGIN moov
    Box children[]
IOC END

IOC BEGIN mvex
    Box children[]
IOC END

IOC BEGIN prft
    uint(8) version
    uint(24) flags
    unsigned int(32) reference_track_ID
    unsigned int(64) ntp_timestamp
    if (version==0) {
        unsigned int(32) media_time
    } else {
        unsigned int(64) media_time
    }
IOC END

IOC BEGIN saio
    uint(8) version
    uint(24) flags
    if (flags & 1) {
        unsigned int(32) aux_info_type
        unsigned int(32) aux_info_type_parameter
    }
    unsigned int(32) entry_count
    if ( version == 0 ) {
        unsigned int(32) offset[ entry_count ]
    }
    else {
        unsigned int(64) offset[ entry_count ]
    }
IOC END

IOC BEGIN saiz
    uint(8) version
    uint(24) flags
    if (flags & 1) {
        unsigned int(32) aux_info_type
        unsigned int(32) aux_info_type_parameter
    }
    unsigned int(8) default_sample_info_size
    unsigned int(32) sample_count
    if (default_sample_info_size == 0) {
        unsigned int(8) sample_info_size[ sample_count ]
    }
IOC END

IOC BEGIN sbgp
    uint(8) version
    uint(24) flags
    unsigned int(32)    grouping_type
    if (version == 1) {
        unsigned int(32) grouping_type_parameter
    }
    unsigned int(32)    entry_count
    for (i=1; i <= entry_count; i++) {
        unsigned int(32)    sample_count
        unsigned int(32)    group_description_index
    }
IOC END

IOC BEGIN schi
    Box children[]
IOC END

IOC BEGIN schm
    uint(8) version
    uint(24) flags
    unsigned int(32) scheme_type
    unsigned int(32) scheme_version
    if (flags & 0x000001) {
        utf8string scheme_uri
    }
IOC END

IOC BEGIN csch
    uint(8) version
    uint(24) flags
    unsigned int(32) scheme_type
    unsigned int(32) scheme_version
    if (flags & 0x000001) {
        utf8string scheme_uri
    }
IOC END

IOC BEGIN skip
    unsigned int(8) data[]
IOC END

IOC BEGIN smhd
    uint(8) version
    uint(24) flags
    int(16) balance
    unsigned int(16)    reserved
IOC END

IOC BEGIN srpp
    unsigned int(32)        encryption_algorithm_rtp
    unsigned int(32)        encryption_algorithm_rtcp
    unsigned int(32)        integrity_algorithm_rtp
    unsigned int(32)        integrity_algorithm_rtcp
    SchemeTypeBox            scheme_type_box
    SchemeInformationBox    info
IOC END

IOC BEGIN stbl
    Box children[]
IOC END

IOC BEGIN stco
    uint(8) version
    uint(24) flags
    unsigned int(32)    entry_count
    for (i=1; i <= entry_count; i++) {
        unsigned int(32)    chunk_offset
    }
IOC END

IOC BEGIN sthd
    uint(8) version
    uint(24) flags
IOC END

IOC BEGIN stsc
    uint(8) version
    uint(24) flags
    unsigned int(32)    entry_count
    for (i=1; i <= entry_count; i++) {
        unsigned int(32)    first_chunk
        unsigned int(32)    samples_per_chunk
        unsigned int(32)    sample_description_index
    }
IOC END

IOC BEGIN stsd
    uint(8) version
    uint(24) flags
    unsigned int(32) entry_count;
    for (i = 1 ; i <= entry_count ; i++){
        Box sample_entry
    }
IOC END

IOC BEGIN stts
    uint(8) version
    uint(24) flags
    unsigned int(32)    entry_count
    for (i=0; i < entry_count; i++) {
        unsigned int(32)    sample_count
        unsigned int(32)    sample_delta
    }
IOC END

IOC BEGIN tfdt
    uint(8) version
    uint(24) flags
    if (version==1) {
        unsigned int(64) baseMediaDecodeTime
    } else {
        unsigned int(32) baseMediaDecodeTime
    }
IOC END

IOC BEGIN traf
    Box children[]
IOC END

IOC BEGIN trak
    Box children[]
IOC END

IOC BEGIN xml 
    uint(8) version
    uint(24) flags
    utf8string xml
IOC END

IOC BEGIN uri 
    uint(8) version
    uint(24) flags
    utf8string uri
IOC END
