namespace ContentDotNet.Extensions.G711.Internal;

internal static class G711Lookups
{
    public static readonly byte[] PcmToA = new byte[65536];
    public static readonly byte[] PcmToMu = new byte[65536];

    static G711Lookups()
    {
        for (int i = short.MinValue; i <= short.MaxValue; i++)
        {
            ushort index = (ushort)(i + 32768);
            PcmToA[index] = EncodeALaw((short)i);
            PcmToMu[index] = EncodeMuLaw((short)i);
        }
    }

    public static byte EncodeALaw(short pcm)
    {
        const int ALAW_MAX = 0x7FF;

        int sign;
        int exponent;
        int mantissa;
        byte compressedByte;

        sign = (pcm < 0) ? 0x80 : 0;
        if (pcm < 0)
            pcm = (short)-pcm;

        if (pcm > ALAW_MAX)
            pcm = ALAW_MAX;

        if (pcm >= 256)
        {
            exponent = (int)Math.Log(pcm / 256.0, 2);
            mantissa = (pcm >> (exponent + 3)) & 0x0F;
            compressedByte = (byte)((exponent << 4) | mantissa);
        }
        else
        {
            compressedByte = (byte)(pcm >> 4);
        }

        compressedByte ^= 0x55;
        return (byte)(compressedByte ^ sign);
    }

    public static byte EncodeMuLaw(short pcm)
    {
        const int MULAW_MAX = 0x1FFF;
        const int BIAS = 0x84;

        int sign = (pcm < 0) ? 0x80 : 0;
        if (pcm < 0)
            pcm = (short)-pcm;
        if (pcm > MULAW_MAX)
            pcm = MULAW_MAX;

        pcm += BIAS;
        int exponent = 7;
        for (int expMask = 0x4000; (pcm & expMask) == 0 && exponent > 0; expMask >>= 1)
        {
            exponent--;
        }

        int mantissa = (pcm >> (exponent + 3)) & 0x0F;
        byte muLawByte = (byte)(~(sign | (exponent << 4) | mantissa));
        return muLawByte;
    }

    public static ReadOnlySpan<short> MuToPcm =>
    [
            64,    192,    320,    448,    576,    704,    832,    960,   1088,   1216,   1344,   1472,   1600,   1728,   1856,   1984,
           128,    384,    640,    896,   1152,   1408,   1664,   1920,   2176,   2432,   2688,   2944,   3200,   3456,   3712,   3968,
           256,    768,   1280,   1792,   2304,   2816,   3328,   3840,   4352,   4864,   5376,   5888,   6400,   6912,   7424,   7936,
           512,   1536,   2560,   3584,   4608,   5632,   6656,   7680,   8704,   9728,  10752,  11776,  12800,  13824,  14848,  15872,
          1024,   3072,   5120,   7168,   9216,  11264,  13312,  15360,  17408,  19456,  21504,  23552,  25600,  27648,  29696,  31744,
          2048,   6144,  10240,  14336,  18432,  22528,  26624,  30720, -30720, -26624, -22528, -18432, -14336, -10240,  -6144,  -2048,
          4096,  12288,  20480,  28672, -28672, -20480, -12288,  -4096,   4096,  12288,  20480,  28672, -28672, -20480, -12288,  -4096,
          8192,  24576, -24576,  -8192,   8192,  24576, -24576,  -8192,   8192,  24576, -24576,  -8192,   8192,  24576, -24576,  -8192,
        -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384,
        -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    ];

    public static ReadOnlySpan<short> AToPcm =>
    [
            64,    192,    320,    448,    576,    704,    832,    960,   1088,   1216,   1344,   1472,   1600,   1728,   1856,   1984,
           128,    384,    640,    896,   1152,   1408,   1664,   1920,   2176,   2432,   2688,   2944,   3200,   3456,   3712,   3968,
           256,    768,   1280,   1792,   2304,   2816,   3328,   3840,   4352,   4864,   5376,   5888,   6400,   6912,   7424,   7936,
           512,   1536,   2560,   3584,   4608,   5632,   6656,   7680,   8704,   9728,  10752,  11776,  12800,  13824,  14848,  15872,
          1024,   3072,   5120,   7168,   9216,  11264,  13312,  15360,  17408,  19456,  21504,  23552,  25600,  27648,  29696,  31744,
          2048,   6144,  10240,  14336,  18432,  22528,  26624,  30720, -30720, -26624, -22528, -18432, -14336, -10240,  -6144,  -2048,
          4096,  12288,  20480,  28672, -28672, -20480, -12288,  -4096,   4096,  12288,  20480,  28672, -28672, -20480, -12288,  -4096,
          8192,  24576, -24576,  -8192,   8192,  24576, -24576,  -8192,   8192,  24576, -24576,  -8192,   8192,  24576, -24576,  -8192,
        -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384, -16384,  16384,
        -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
             0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    ];
}
