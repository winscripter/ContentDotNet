//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContentDotNet.Security
{
    using System;
    
    
    #region 
static
    public class JaggedArrayUtil
    {
        
        public static T[] AllocateJaggedArray<T>(this Configuration cfg, int size0, int elementSize)
        {
            cfg.MemoryAllocator.RequestMemory(elementSize * size0);
        T[] array = new T[size0];
        return array;
        }
        
        public static T[][] AllocateJaggedArray<T>(this Configuration cfg, int size0, int size1, int elementSize)
        {
            cfg.MemoryAllocator.RequestMemory(elementSize * size0 * size1);
        T[][] array = new T[size0][];
        for (int i0 = 0; i0 < size0; i0++) {
            array[i0] = new T[size1];
            }
        return array;
        }
        
        public static T[][][] AllocateJaggedArray<T>(this Configuration cfg, int size0, int size1, int size2, int elementSize)
        {
            cfg.MemoryAllocator.RequestMemory(elementSize * size0 * size1 * size2);
        T[][][] array = new T[size0][][];
        for (int i0 = 0; i0 < size0; i0++) {
            array[i0] = new T[size1][];
            for (int i1 = 0; i1 < size1; i1++) {
                array[i0][i1] = new T[size2];
                }
    }
        return array;
        }
        
        public static T[][][][] AllocateJaggedArray<T>(this Configuration cfg, int size0, int size1, int size2, int size3, int elementSize)
        {
            cfg.MemoryAllocator.RequestMemory(elementSize * size0 * size1 * size2 * size3);
        T[][][][] array = new T[size0][][][];
        for (int i0 = 0; i0 < size0; i0++) {
            array[i0] = new T[size1][][];
            for (int i1 = 0; i1 < size1; i1++) {
                array[i0][i1] = new T[size2][];
                for (int i2 = 0; i2 < size2; i2++) {
                    array[i0][i1][i2] = new T[size3];
                    }
    }
    }
        return array;
        }
        
        public static T[][][][][] AllocateJaggedArray<T>(this Configuration cfg, int size0, int size1, int size2, int size3, int size4, int elementSize)
        {
            cfg.MemoryAllocator.RequestMemory(elementSize * size0 * size1 * size2 * size3 * size4);
        T[][][][][] array = new T[size0][][][][];
        for (int i0 = 0; i0 < size0; i0++) {
            array[i0] = new T[size1][][][];
            for (int i1 = 0; i1 < size1; i1++) {
                array[i0][i1] = new T[size2][][];
                for (int i2 = 0; i2 < size2; i2++) {
                    array[i0][i1][i2] = new T[size3][];
                    for (int i3 = 0; i3 < size3; i3++) {
                        array[i0][i1][i2][i3] = new T[size4];
                        }
    }
    }
    }
        return array;
        }
        
        public static T[][][][][][] AllocateJaggedArray<T>(this Configuration cfg, int size0, int size1, int size2, int size3, int size4, int size5, int elementSize)
        {
            cfg.MemoryAllocator.RequestMemory(elementSize * size0 * size1 * size2 * size3 * size4 * size5);
        T[][][][][][] array = new T[size0][][][][][];
        for (int i0 = 0; i0 < size0; i0++) {
            array[i0] = new T[size1][][][][];
            for (int i1 = 0; i1 < size1; i1++) {
                array[i0][i1] = new T[size2][][][];
                for (int i2 = 0; i2 < size2; i2++) {
                    array[i0][i1][i2] = new T[size3][][];
                    for (int i3 = 0; i3 < size3; i3++) {
                        array[i0][i1][i2][i3] = new T[size4][];
                        for (int i4 = 0; i4 < size4; i4++) {
                            array[i0][i1][i2][i3][i4] = new T[size5];
                            }
    }
    }
    }
    }
        return array;
        }
    }
    #endregion
}
