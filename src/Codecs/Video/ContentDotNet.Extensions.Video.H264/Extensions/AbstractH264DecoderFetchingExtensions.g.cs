//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace ContentDotNet.Extensions.Video.H264.Extensions
{
	using ContentDotNet.Extensions.Video.H264.RbspModels;

	/// <summary>
	///   These are extensions that fetch syntax values off of <see cref="AbstractH264Decoder" />.
	/// </summary>
	/// <remarks>
	///   <para>The methods that prefix with <c>Fetch</c> will fetch the value and return <see langword="null" /> if it's not available.</para>
	///   <para>The methods that prefix with <c>TryFetch</c> return a boolean indicating if the element was fetched, and the actually fetched element is in an <see langword="out" /> parameter.</para>
	///   <para>The methods that prefix with <c>Get</c> will return an exception if the value is missing, and if these methods do return, they guarantee to return non-nullable values.</para>
	/// </remarks>
	public static class AbstractH264DecoderFetchingExtensions
	{
		
		/// <summary>
		///   Retrieves <see cref="RbspSequenceParameterSetData" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspSequenceParameterSetData" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspSequenceParameterSetData? FetchSps(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SequenceParameterSetData;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspSequenceParameterSetData" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspSequenceParameterSetData" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSps(this AbstractH264Decoder decoder, out RbspSequenceParameterSetData? result)
		{
			result = decoder.State?.H264RbspState?.SequenceParameterSetData;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspSequenceParameterSetData" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspSequenceParameterSetData" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspSequenceParameterSetData GetSps(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchSps(out var result))
				throw new InvalidOperationException("The value RbspSequenceParameterSetData could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspVuiParameters" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspVuiParameters" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspVuiParameters? FetchVui(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SequenceParameterSetData?.VuiParameters;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspVuiParameters" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspVuiParameters" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchVui(this AbstractH264Decoder decoder, out RbspVuiParameters? result)
		{
			result = decoder.State?.H264RbspState?.SequenceParameterSetData?.VuiParameters;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspVuiParameters" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspVuiParameters" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspVuiParameters GetVui(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchVui(out var result))
				throw new InvalidOperationException("The value RbspVuiParameters could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspHrdParameters" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspHrdParameters" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspHrdParameters? FetchNalHrd(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SequenceParameterSetData?.VuiParameters?.NalHrdParameters;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspHrdParameters" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspHrdParameters" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNalHrd(this AbstractH264Decoder decoder, out RbspHrdParameters? result)
		{
			result = decoder.State?.H264RbspState?.SequenceParameterSetData?.VuiParameters?.NalHrdParameters;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspHrdParameters" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspHrdParameters" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspHrdParameters GetNalHrd(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchNalHrd(out var result))
				throw new InvalidOperationException("The value RbspHrdParameters could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspHrdParameters" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspHrdParameters" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspHrdParameters? FetchVclHrd(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SequenceParameterSetData?.VuiParameters?.VclHrdParameters;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspHrdParameters" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspHrdParameters" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchVclHrd(this AbstractH264Decoder decoder, out RbspHrdParameters? result)
		{
			result = decoder.State?.H264RbspState?.SequenceParameterSetData?.VuiParameters?.VclHrdParameters;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspHrdParameters" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspHrdParameters" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspHrdParameters GetVclHrd(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchVclHrd(out var result))
				throw new InvalidOperationException("The value RbspHrdParameters could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspAccessUnitDelimiter" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspAccessUnitDelimiter" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspAccessUnitDelimiter? FetchAud(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.AccessUnitDelimiter;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspAccessUnitDelimiter" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspAccessUnitDelimiter" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchAud(this AbstractH264Decoder decoder, out RbspAccessUnitDelimiter? result)
		{
			result = decoder.State?.H264RbspState?.AccessUnitDelimiter;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspAccessUnitDelimiter" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspAccessUnitDelimiter" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspAccessUnitDelimiter GetAud(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchAud(out var result))
				throw new InvalidOperationException("The value RbspAccessUnitDelimiter could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspSliceHeader" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspSliceHeader" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspSliceHeader? FetchSliceHeader(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspSliceHeader" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspSliceHeader" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceHeader(this AbstractH264Decoder decoder, out RbspSliceHeader? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspSliceHeader" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspSliceHeader" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspSliceHeader GetSliceHeader(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchSliceHeader(out var result))
				throw new InvalidOperationException("The value RbspSliceHeader could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspDecRefPicMarking" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspDecRefPicMarking" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspDecRefPicMarking? FetchDecRefPicMarking(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.DecRefPicMarking;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspDecRefPicMarking" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspDecRefPicMarking" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDecRefPicMarking(this AbstractH264Decoder decoder, out RbspDecRefPicMarking? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.DecRefPicMarking;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspDecRefPicMarking" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspDecRefPicMarking" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspDecRefPicMarking GetDecRefPicMarking(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchDecRefPicMarking(out var result))
				throw new InvalidOperationException("The value RbspDecRefPicMarking could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspDecRefPicMarking" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspDecRefPicMarking" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspDecRefPicMarking? FetchDecodedReferencePictureMarking(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.DecRefPicMarking;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspDecRefPicMarking" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspDecRefPicMarking" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDecodedReferencePictureMarking(this AbstractH264Decoder decoder, out RbspDecRefPicMarking? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.DecRefPicMarking;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspDecRefPicMarking" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspDecRefPicMarking" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspDecRefPicMarking GetDecodedReferencePictureMarking(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchDecodedReferencePictureMarking(out var result))
				throw new InvalidOperationException("The value RbspDecRefPicMarking could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspPredWeightTable" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspPredWeightTable" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspPredWeightTable? FetchPredWeightTable(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.PredWeightTable;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspPredWeightTable" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspPredWeightTable" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPredWeightTable(this AbstractH264Decoder decoder, out RbspPredWeightTable? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.PredWeightTable;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspPredWeightTable" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspPredWeightTable" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspPredWeightTable GetPredWeightTable(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchPredWeightTable(out var result))
				throw new InvalidOperationException("The value RbspPredWeightTable could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspPredWeightTable" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspPredWeightTable" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspPredWeightTable? FetchPredictionWeightTable(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.PredWeightTable;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspPredWeightTable" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspPredWeightTable" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPredictionWeightTable(this AbstractH264Decoder decoder, out RbspPredWeightTable? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.PredWeightTable;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspPredWeightTable" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspPredWeightTable" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspPredWeightTable GetPredictionWeightTable(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchPredictionWeightTable(out var result))
				throw new InvalidOperationException("The value RbspPredWeightTable could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspPictureParameterSet" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspPictureParameterSet" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspPictureParameterSet? FetchPps(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.PictureParameterSet;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspPictureParameterSet" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspPictureParameterSet" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPps(this AbstractH264Decoder decoder, out RbspPictureParameterSet? result)
		{
			result = decoder.State?.H264RbspState?.PictureParameterSet;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspPictureParameterSet" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspPictureParameterSet" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspPictureParameterSet GetPps(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchPps(out var result))
				throw new InvalidOperationException("The value RbspPictureParameterSet could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspRefPicListModification" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspRefPicListModification" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspRefPicListModification? FetchRefPicListModification(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.RefPicListModification;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspRefPicListModification" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspRefPicListModification" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchRefPicListModification(this AbstractH264Decoder decoder, out RbspRefPicListModification? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.RefPicListModification;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspRefPicListModification" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspRefPicListModification" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspRefPicListModification GetRefPicListModification(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchRefPicListModification(out var result))
				throw new InvalidOperationException("The value RbspRefPicListModification could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="RbspRefPicListModification" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="RbspRefPicListModification" />, or <see langword="null" /> if unavailable.</returns>
		public static RbspRefPicListModification? FetchReferencePictureListModification(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.RefPicListModification;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="RbspRefPicListModification" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="RbspRefPicListModification" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchReferencePictureListModification(this AbstractH264Decoder decoder, out RbspRefPicListModification? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.RefPicListModification;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="RbspRefPicListModification" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="RbspRefPicListModification" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static RbspRefPicListModification GetReferencePictureListModification(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchReferencePictureListModification(out var result))
				throw new InvalidOperationException("The value RbspRefPicListModification could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="MvcRbspRefPicListMvcModification" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="MvcRbspRefPicListMvcModification" />, or <see langword="null" /> if unavailable.</returns>
		public static MvcRbspRefPicListMvcModification? FetchRefPicListMvcModification(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.RefPicListMvcModification;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="MvcRbspRefPicListMvcModification" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="MvcRbspRefPicListMvcModification" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchRefPicListMvcModification(this AbstractH264Decoder decoder, out MvcRbspRefPicListMvcModification? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.RefPicListMvcModification;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="MvcRbspRefPicListMvcModification" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="MvcRbspRefPicListMvcModification" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static MvcRbspRefPicListMvcModification GetRefPicListMvcModification(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchRefPicListMvcModification(out var result))
				throw new InvalidOperationException("The value MvcRbspRefPicListMvcModification could not be fetched.");
			return result!;
		}
		
		/// <summary>
		///   Retrieves <see cref="MvcRbspRefPicListMvcModification" />, or returns <see langword="null" /> if that value isn't available or the
		///   H.264 state/RBSP state is missing.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns><see cref="MvcRbspRefPicListMvcModification" />, or <see langword="null" /> if unavailable.</returns>
		public static MvcRbspRefPicListMvcModification? FetchReferencePictureListMvcModification(this AbstractH264Decoder decoder)
		{
			return decoder.State?.H264RbspState?.SliceHeader?.RefPicListMvcModification;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="MvcRbspRefPicListMvcModification" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <param name="result">The resulting <see cref="MvcRbspRefPicListMvcModification" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchReferencePictureListMvcModification(this AbstractH264Decoder decoder, out MvcRbspRefPicListMvcModification? result)
		{
			result = decoder.State?.H264RbspState?.SliceHeader?.RefPicListMvcModification;
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="MvcRbspRefPicListMvcModification" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="decoder">The source H.264 decoder</param>
		/// <returns>A returned value of type <see cref="MvcRbspRefPicListMvcModification" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static MvcRbspRefPicListMvcModification GetReferencePictureListMvcModification(this AbstractH264Decoder decoder)
		{
			if (!decoder.TryFetchReferencePictureListMvcModification(out var result))
				throw new InvalidOperationException("The value MvcRbspRefPicListMvcModification could not be fetched.");
			return result!;
		}
			}
}
