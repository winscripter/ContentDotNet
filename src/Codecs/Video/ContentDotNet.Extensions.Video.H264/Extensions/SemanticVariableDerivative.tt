<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
namespace ContentDotNet.Extensions.Video.H264 {

	using ContentDotNet.Extensions.Video.H264.Models;
	using System.Runtime.CompilerServices;

	public static partial class H264Extensions {
	<#
		var db = new Dictionary<string, (string, string)>()
		{
			["MbaffFrameFlag"] = ("bool", "value.SequenceParameterSetData?.MbAdaptiveFrameFieldFlag == true && value.SliceHeader?.FieldPicFlag == false"),
			["PicWidthInMbs"] = ("int", "(int)(value.SequenceParameterSetData?.PicWidthInMbsMinus1 ?? 1) + 1"),
			["PicHeightInMapUnits"] = ("int", "(int)(value.SequenceParameterSetData?.PicHeightInMapUnitsMinus1 ?? 1) + 1"),
			["PicWidthInSamplesL"] = ("int", "(int)value.PicWidthInMbs() * 16"),
			["SliceQpy"] = ("int", "(int)(26 + (value.PictureParameterSet?.PicInitQpMinus26 ?? 1) + (value.SliceHeader?.SliceQpDelta ?? 1))"),
			["IdrPicFlag"] = ("bool", "value.NalUnit?.NalUnitType == 5"),
			["MaxPicOrderCntLsb"] = ("int", "(int)Math.Pow(2, (value.SequenceParameterSetData?.Log2MaxPicOrderCntLsbMinus4 ?? 0) + 4)"),
			["MaxFrameNum"] = ("int", "(int)Math.Pow(2, (value.SequenceParameterSetData?.Log2MaxFrameNumMinus4 ?? 0) + 4)"),
			["SliceGroupChangeRate"] = ("int", "((int?)value.PictureParameterSet?.SliceGroupChangeRateMinus1 ?? 0) + 1"),
			["PicSizeInMapUnits"] = ("int", "(int)value.PicWidthInMbs() * value.PicHeightInMbs()"),
			["FrameHeightInMbs"] = ("int", "(2 - (value.SequenceParameterSetData!.FrameMbsOnlyFlag ? 1 : 0)) * value.PicHeightInMapUnits()"),
			["PicHeightInMbs"] = ("int", "value.FrameHeightInMbs() / (1 + (value.SequenceParameterSetData!.FrameMbsOnlyFlag ? 1 : 0))"),
			["MapUnitsInSliceGroup0"] = ("int", "Math.Min(((int?)value.SliceHeader?.SliceGroupChangeCycle ?? 0) * value.SliceGroupChangeRate(), value.PicSizeInMapUnits())"),
			["PicSizeInMbs"] = ("int", "value.PicWidthInMbs() * value.PicHeightInMbs()"),
			["BitDepthY"] = ("int", "8 + ((int?)value.SequenceParameterSetData.BitDepthLumaMinus8 ?? 0)"),
			["BitDepthC"] = ("int", "8 + ((int?)value.SequenceParameterSetData.BitDepthChromaMinus8 ?? 0)"),
			["ChromaFormat"] = ("H264ChromaFormat", "H264ChromaFormat.GetSubsamplingAndSize(value.SequenceParameterSetData!)"),
			["ChromaArrayType"] = ("int", "!(value.SequenceParameterSetData?.SeparateColourPlaneFlag ?? false) ? ((int?)value.SequenceParameterSetData?.ChromaFormatIdc ?? 0) : 0"),
			["ChromaMacroblockSizes"] = ("H264MacroblockChromaSizes", "new(16 / value.ChromaFormat().ChromaWidth, 16 / value.ChromaFormat().ChromaHeight)"),
			["PicHeightInSamplesC"] = ("int", "value.FrameHeightInMbs() * 16 / value.ChromaFormat().ChromaHeight"),
			["PicWidthInSamplesC"] = ("int", "value.PicWidthInMbs() * value.ChromaMacroblockSizes().MbWidthC"),
			["PicHeightInSamplesL"] = ("int", "value.FrameHeightInMbs() * 16")
		};

		foreach (KeyValuePair<string, (string, string)> dbValue in db) {
	#>
		/// <summary>
		///   Derives the variable <c><#= dbValue.Key #></c>.
		/// </summary>
		/// <param name="value">Source H.264 RBSP state</param>
		/// <returns>
		///   The value of the derived variable.
		/// </returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#= dbValue.Value.Item1 #> <#= dbValue.Key#>(
			this H264RbspState value)
			=> <#= dbValue.Value.Item2 #>;

		/// <summary>
		///   Derives the variable <c><#= dbValue.Key #></c>.
		/// </summary>
		/// <param name="value">Source H.264 state</param>
		/// <returns>
		///   The value of the derived variable.
		/// </returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#= dbValue.Value.Item1 #> Derive<#= dbValue.Key#>(
			this H264State value)
			=> value.H264RbspState?.<#= dbValue.Key #>() ?? ThrowHelper.RbspStateUnavailable<<#= dbValue.Value.Item1 #>>();

	<# } #>
	}
}
