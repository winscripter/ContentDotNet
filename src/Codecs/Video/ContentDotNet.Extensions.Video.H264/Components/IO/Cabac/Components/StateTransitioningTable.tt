<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContentDotNet.Extensions.Video.H264.Components.IO.Cabac.Components
{
    /// <summary>
    ///   State transitioning table for H.264 CABAC.
    /// </summary>
    public static class StateTransitioningTable
    {
    <#
        const string TransIdxLPS =
@"0 0 1 2 2 4 4 5 6 7 8 9 9 11 11 12 13 13 15 15 16 16 18 18 19 19 21 21 22 22 23 24 24 25 26 26 27 27 28 29 29 30 30 30 31 32 32 33 33 33 34 34 35 35 35 36 36 36 37 37 37 38 38 63";

       const string TransIdxMPS =
@"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 62 63";

        var lps = TransIdxLPS.Split(' ').Select(int.Parse).ToArray();
        var mps = TransIdxMPS.Split(' ').Select(int.Parse).ToArray();
        if (lps.Length != 64)
            throw new InvalidOperationException("LPS transition table must have 64 entries.");
        if (mps.Length != 64)
            throw new InvalidOperationException("MPS transition table must have 64 entries.");
        var sb = new StringBuilder();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        ///   LPS state transitioning table.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ReadOnlySpan<int> LpsTransitionTable =>");
        sb.AppendLine("        [");
        for (int i = 0; i < lps.Length; i++)
        {
            sb.Append($"            {lps[i]}");
            if (i < lps.Length - 1)
                sb.Append(",");
            sb.AppendLine();
        }
        sb.AppendLine("        ];");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        ///   MPS state transitioning table.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public static ReadOnlySpan<int> MpsTransitionTable =>");
        sb.AppendLine("        [");
        for (int i = 0; i < mps.Length; i++)
        {
            sb.Append($"            {mps[i]}");
            if (i < mps.Length - 1)
                sb.Append(",");
            sb.AppendLine();
        }
        sb.AppendLine("        ];");
    #>

<#= sb.ToString() #>
    }
}
