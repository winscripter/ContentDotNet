<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
namespace ContentDotNet.Extensions.Video.H264.Components.IO.Cabac
{
    using ContentDotNet.Extensions.Video.H264.Components.IO.Abstractions.Cabac;
    using ContentDotNet.Extensions.Video.H264.Models;

    public static partial class AssignCtxIdx
    {
        private static int Core(IH264CabacDecoder cd, H264State h264, H264MacroblockInfo currMB, int binIdx, int ctxIdxOffset)
        {
            int incrementalCtxIdx = 0;
<#
    // The one with the dot . means it refers to a clause under 9.3.3.1.1.x where x is the number after the dot
    // The one with ! means direct ctxIdx assignment, no waiting.
    // The one with na means Not An.
    // The one with @ means ctxIdxInc assignment.
    var incrementalTable = new Dictionary<int, string[]>()
    {
        [0] = new[] {
                ".3",
                "na",
                "na",
                "na",
                "na",
                "na",
                "na"
            },
        [3] = new[] {
                ".3",
                "!276",
                "@3",
                "@4",
                ".22",
                ".22",
                "@7"
            },
        [11] = new[] {
                ".1",
                "na",
                "na",
                "na",
                "na",
                "na",
                "na"
            },
        [14] = new[] {
                "@0",
                "@1",
                ".22",
                "na",
                "na",
                "na",
                "na"
            },
        [17] = new[] {
                "@0",
                "!276",
                "@1",
                "@2",
                ".22",
                "@3",
                "@3"
            },
        [21] = new[] {
                "@0",
                "@1",
                "@2",
                "na",
                "na",
                "na",
                "na"
            },
        [24] = new[] {
                ".1",
                "na",
                "na",
                "na",
                "na",
                "na",
                "na"
            },
        [27] = new[] {
                ".3",
                "@3",
                ".22",
                "@5",
                "@5",
                "@5",
                "@5"
            },
        [32] = new[] {
                "@0",
                "!276",
                "@1",
                "@2",
                ".22",
                "@3",
                "@3"
            },
        [36] = new[] {
                "@0",
                "@1",
                ".22",
                "@3",
                "@3",
                "@3",
                "na"
            },
        [40] = new[] {
                ".7",
                "@3",
                "@4",
                "@5",
                "@6",
                "@6",
                "@6"
            },
        [47] = new[] {
                ".7",
                "@3",
                "@4",
                "@5",
                "@6",
                "@6",
                "@6"
            },
        [54] = new[] {
                ".6",
                "@4",
                "@5",
                "@5",
                "@5",
                "@5",
                "@5"
            },
        [60] = new[] {
                ".5",
                "@2",
                "@3",
                "@3",
                "@3",
                "@3",
                "@3"
            },
        [64] = new[] {
                ".8",
                "@3",
                "@3",
                "na",
                "na",
                "na",
                "na"
            },
        [68] = new[] {
                "@0",
                "na",
                "na",
                "na",
                "na",
                "na",
                "na"
            },
        [69] = new[] {
                "@0",
                "@0",
                "@0",
                "na",
                "na",
                "na",
                "na"
            },
        [70] = new[] {
                ".2",
                "na",
                "na",
                "na",
                "na",
                "na",
                "na"
            },
        [73] = new[] {
                ".4",
                ".4",
                ".4",
                ".4",
                "na",
                "na",
                "na"
            },
        [77] = new[] {
                ".4",
                ".4",
                "na",
                "na",
                "na",
                "na",
                "na"
            },
        [276] = new[] {
                "@0",
                "na",
                "na",
                "na",
                "na",
                "na",
                "na"
            },
        [399] = new[] {
                ".10",
                "na",
                "na",
                "na",
                "na",
                "na",
                "na"
            }
    };

    bool first = true;
    foreach (KeyValuePair<int, string[]> kvp in incrementalTable) {
        int invkIdx = 0;
        foreach (string s in kvp.Value) {
            string invkString = "";
            if (s == "na") continue;

            if (s.StartsWith("."))
            {
                var arg = s.Split('.')[1];
                invkString = $"incrementalCtxIdx = InvokeCiiFunction(cd, {arg}, h264, currMB, binIdx, ctxIdxOffset);";
            }
            else if (s.StartsWith("@"))
            {
                var arg = s.Split('@')[1];
                invkString = $"incrementalCtxIdx = {arg};";
            }
            else if (s.StartsWith("!"))
            {
                var arg = s.Split('!')[1];
                invkString = $"return {arg};";
            }
            string elseKw = first ? "" : "else ";
            string ifelse = elseKw + "if";
            string csBinIdxCompare = invkIdx <= 5 ? $"== {invkIdx}" : ">= 6";
#>
            <#= ifelse #> (ctxIdxOffset == <#= kvp.Key #> && binIdx <#= csBinIdxCompare #>)
            {
                <#= invkString #>
            }
<# first = false; invkIdx++; } } #>
            else
            {
                throw new InvalidOperationException("NotAn reached");
            }
            return incrementalCtxIdx + ctxIdxOffset;
        }
    }
}
