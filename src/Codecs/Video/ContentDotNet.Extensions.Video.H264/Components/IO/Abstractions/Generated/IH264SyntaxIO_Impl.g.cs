//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContentDotNet.Extensions.Video.H264.Components.IO.Abstractions
{
	public partial interface IH264SyntaxReader
	{
		/// <summary>
		///   Reads a syntax element <c>mb_skip_run</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadMbSkipRun();

		/// <summary>
		///   Reads a syntax element <c>mb_skip_run</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadMbSkipRunAsync();

		/// <summary>
		///   Reads a syntax element <c>mb_skip_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadMbSkipFlag();

		/// <summary>
		///   Reads a syntax element <c>mb_skip_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadMbSkipFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>mb_field_decoding_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadMbFieldDecodingFlag();

		/// <summary>
		///   Reads a syntax element <c>mb_field_decoding_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadMbFieldDecodingFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>end_of_slice_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadEndOfSliceFlag();

		/// <summary>
		///   Reads a syntax element <c>end_of_slice_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadEndOfSliceFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>mb_type</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadMbType();

		/// <summary>
		///   Reads a syntax element <c>mb_type</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadMbTypeAsync();

		/// <summary>
		///   Reads a syntax element <c>transform_size_8x8_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadTransformSize8X8Flag();

		/// <summary>
		///   Reads a syntax element <c>transform_size_8x8_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadTransformSize8X8FlagAsync();

		/// <summary>
		///   Reads a syntax element <c>coded_block_pattern</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadCodedBlockPattern();

		/// <summary>
		///   Reads a syntax element <c>coded_block_pattern</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadCodedBlockPatternAsync();

		/// <summary>
		///   Reads a syntax element <c>mb_qp_delta</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		int ReadMbQpDelta();

		/// <summary>
		///   Reads a syntax element <c>mb_qp_delta</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<int> ReadMbQpDeltaAsync();

		/// <summary>
		///   Reads a syntax element <c>prev_intra4x4_pred_mode_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadPrevIntra4x4PredModeFlag();

		/// <summary>
		///   Reads a syntax element <c>prev_intra4x4_pred_mode_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadPrevIntra4x4PredModeFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>rem_intra4x4_pred_mode</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadRemIntra4x4PredMode();

		/// <summary>
		///   Reads a syntax element <c>rem_intra4x4_pred_mode</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadRemIntra4x4PredModeAsync();

		/// <summary>
		///   Reads a syntax element <c>prev_intra8x8_pred_mode_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadPrevIntra8x8PredModeFlag();

		/// <summary>
		///   Reads a syntax element <c>prev_intra8x8_pred_mode_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadPrevIntra8x8PredModeFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>rem_intra8x8_pred_mode</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadRemIntra8x8PredMode();

		/// <summary>
		///   Reads a syntax element <c>rem_intra8x8_pred_mode</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadRemIntra8x8PredModeAsync();

		/// <summary>
		///   Reads a syntax element <c>intra_chroma_pred_mode</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadIntraChromaPredMode();

		/// <summary>
		///   Reads a syntax element <c>intra_chroma_pred_mode</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadIntraChromaPredModeAsync();

		/// <summary>
		///   Reads a syntax element <c>ref_idx_l0</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadRefIdxL0();

		/// <summary>
		///   Reads a syntax element <c>ref_idx_l0</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadRefIdxL0Async();

		/// <summary>
		///   Reads a syntax element <c>ref_idx_l1</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadRefIdxL1();

		/// <summary>
		///   Reads a syntax element <c>ref_idx_l1</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadRefIdxL1Async();

		/// <summary>
		///   Reads a syntax element <c>mvd_l0</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		int ReadMvdL0();

		/// <summary>
		///   Reads a syntax element <c>mvd_l0</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<int> ReadMvdL0Async();

		/// <summary>
		///   Reads a syntax element <c>mvd_l1</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		int ReadMvdL1();

		/// <summary>
		///   Reads a syntax element <c>mvd_l1</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<int> ReadMvdL1Async();

		/// <summary>
		///   Reads a syntax element <c>sub_mb_type</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadSubMbType();

		/// <summary>
		///   Reads a syntax element <c>sub_mb_type</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadSubMbTypeAsync();

		/// <summary>
		///   Reads a syntax element <c>coeff_token</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadCoeffToken();

		/// <summary>
		///   Reads a syntax element <c>coeff_token</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadCoeffTokenAsync();

		/// <summary>
		///   Reads a syntax element <c>trailing_ones_sign_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadTrailingOnesSignFlag();

		/// <summary>
		///   Reads a syntax element <c>trailing_ones_sign_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadTrailingOnesSignFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>level_prefix</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadLevelPrefix();

		/// <summary>
		///   Reads a syntax element <c>level_prefix</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadLevelPrefixAsync();

		/// <summary>
		///   Reads a syntax element <c>level_suffix</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadLevelSuffix();

		/// <summary>
		///   Reads a syntax element <c>level_suffix</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadLevelSuffixAsync();

		/// <summary>
		///   Reads a syntax element <c>total_zeros</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadTotalZeros();

		/// <summary>
		///   Reads a syntax element <c>total_zeros</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadTotalZerosAsync();

		/// <summary>
		///   Reads a syntax element <c>run_before</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadRunBefore();

		/// <summary>
		///   Reads a syntax element <c>run_before</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadRunBeforeAsync();

		/// <summary>
		///   Reads a syntax element <c>coded_block_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadCodedBlockFlag();

		/// <summary>
		///   Reads a syntax element <c>coded_block_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadCodedBlockFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>significant_coeff_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadSignificantCoeffFlag();

		/// <summary>
		///   Reads a syntax element <c>significant_coeff_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadSignificantCoeffFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>last_significant_coeff_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadLastSignificantCoeffFlag();

		/// <summary>
		///   Reads a syntax element <c>last_significant_coeff_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadLastSignificantCoeffFlagAsync();

		/// <summary>
		///   Reads a syntax element <c>coeff_abs_level_minus1</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		uint ReadCoeffAbsLevelMinus1();

		/// <summary>
		///   Reads a syntax element <c>coeff_abs_level_minus1</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<uint> ReadCoeffAbsLevelMinus1Async();

		/// <summary>
		///   Reads a syntax element <c>coeff_sign_flag</c> from the H.264 bitstream.
		/// </summary>
		/// <returns>The value of the read syntax element.</returns>
		bool ReadCoeffSignFlag();

		/// <summary>
		///   Reads a syntax element <c>coeff_sign_flag</c> from the H.264 bitstream, asynchronously.
		/// </summary>
		/// <returns>The value of the read syntax element, as an awaitable task.</returns>
		Task<bool> ReadCoeffSignFlagAsync();

		}

	public partial interface IH264SyntaxWriter
	{
		/// <summary>
		///   Writes a syntax element <c>mb_skip_run</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteMbSkipRun(uint value);

		/// <summary>
		///   Writes a syntax element <c>mb_skip_run</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteMbSkipRunAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>mb_skip_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteMbSkipFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>mb_skip_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteMbSkipFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>mb_field_decoding_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteMbFieldDecodingFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>mb_field_decoding_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteMbFieldDecodingFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>end_of_slice_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteEndOfSliceFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>end_of_slice_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteEndOfSliceFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>mb_type</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteMbType(uint value);

		/// <summary>
		///   Writes a syntax element <c>mb_type</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteMbTypeAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>transform_size_8x8_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteTransformSize8X8Flag(bool value);

		/// <summary>
		///   Writes a syntax element <c>transform_size_8x8_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteTransformSize8X8FlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>coded_block_pattern</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteCodedBlockPattern(uint value);

		/// <summary>
		///   Writes a syntax element <c>coded_block_pattern</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteCodedBlockPatternAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>mb_qp_delta</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteMbQpDelta(int value);

		/// <summary>
		///   Writes a syntax element <c>mb_qp_delta</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<int> WriteMbQpDeltaAsync(int value);

		/// <summary>
		///   Writes a syntax element <c>prev_intra4x4_pred_mode_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WritePrevIntra4x4PredModeFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>prev_intra4x4_pred_mode_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WritePrevIntra4x4PredModeFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>rem_intra4x4_pred_mode</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteRemIntra4x4PredMode(uint value);

		/// <summary>
		///   Writes a syntax element <c>rem_intra4x4_pred_mode</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteRemIntra4x4PredModeAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>prev_intra8x8_pred_mode_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WritePrevIntra8x8PredModeFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>prev_intra8x8_pred_mode_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WritePrevIntra8x8PredModeFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>rem_intra8x8_pred_mode</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteRemIntra8x8PredMode(uint value);

		/// <summary>
		///   Writes a syntax element <c>rem_intra8x8_pred_mode</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteRemIntra8x8PredModeAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>intra_chroma_pred_mode</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteIntraChromaPredMode(uint value);

		/// <summary>
		///   Writes a syntax element <c>intra_chroma_pred_mode</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteIntraChromaPredModeAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>ref_idx_l0</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteRefIdxL0(uint value);

		/// <summary>
		///   Writes a syntax element <c>ref_idx_l0</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteRefIdxL0Async(uint value);

		/// <summary>
		///   Writes a syntax element <c>ref_idx_l1</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteRefIdxL1(uint value);

		/// <summary>
		///   Writes a syntax element <c>ref_idx_l1</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteRefIdxL1Async(uint value);

		/// <summary>
		///   Writes a syntax element <c>mvd_l0</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteMvdL0(int value);

		/// <summary>
		///   Writes a syntax element <c>mvd_l0</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<int> WriteMvdL0Async(int value);

		/// <summary>
		///   Writes a syntax element <c>mvd_l1</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteMvdL1(int value);

		/// <summary>
		///   Writes a syntax element <c>mvd_l1</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<int> WriteMvdL1Async(int value);

		/// <summary>
		///   Writes a syntax element <c>sub_mb_type</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteSubMbType(uint value);

		/// <summary>
		///   Writes a syntax element <c>sub_mb_type</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteSubMbTypeAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>coeff_token</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteCoeffToken(uint value);

		/// <summary>
		///   Writes a syntax element <c>coeff_token</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteCoeffTokenAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>trailing_ones_sign_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteTrailingOnesSignFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>trailing_ones_sign_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteTrailingOnesSignFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>level_prefix</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteLevelPrefix(uint value);

		/// <summary>
		///   Writes a syntax element <c>level_prefix</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteLevelPrefixAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>level_suffix</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteLevelSuffix(uint value);

		/// <summary>
		///   Writes a syntax element <c>level_suffix</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteLevelSuffixAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>total_zeros</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteTotalZeros(uint value);

		/// <summary>
		///   Writes a syntax element <c>total_zeros</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteTotalZerosAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>run_before</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteRunBefore(uint value);

		/// <summary>
		///   Writes a syntax element <c>run_before</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteRunBeforeAsync(uint value);

		/// <summary>
		///   Writes a syntax element <c>coded_block_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteCodedBlockFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>coded_block_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteCodedBlockFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>significant_coeff_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteSignificantCoeffFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>significant_coeff_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteSignificantCoeffFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>last_significant_coeff_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteLastSignificantCoeffFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>last_significant_coeff_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteLastSignificantCoeffFlagAsync(bool value);

		/// <summary>
		///   Writes a syntax element <c>coeff_abs_level_minus1</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteCoeffAbsLevelMinus1(uint value);

		/// <summary>
		///   Writes a syntax element <c>coeff_abs_level_minus1</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<uint> WriteCoeffAbsLevelMinus1Async(uint value);

		/// <summary>
		///   Writes a syntax element <c>coeff_sign_flag</c> to the H.264 bitstream.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		void WriteCoeffSignFlag(bool value);

		/// <summary>
		///   Writes a syntax element <c>coeff_sign_flag</c> to the H.264 bitstream, asynchronously.
		/// </summary>
		/// <param name="value">The syntax element's raw value to write.</param>
		/// <returns>An awaitable task.</returns>
		Task<bool> WriteCoeffSignFlagAsync(bool value);

		}
}
