//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContentDotNet.Extensions.Video.H264.Components.IO.Presets
{
	internal abstract class StrictlyCabacReader : H264ReaderBase
	{
		public override bool UsesCabac => true;

	public override uint ReadMbSkipRun()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return default;
		}

		public override Task<uint> ReadMbSkipRunAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<uint>(default);
		}

																			public override uint ReadCoeffToken()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return default;
		}

		public override Task<uint> ReadCoeffTokenAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<uint>(default);
		}

		public override bool ReadTrailingOnesSignFlag()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return default;
		}

		public override Task<bool> ReadTrailingOnesSignFlagAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<bool>(default);
		}

		public override uint ReadLevelPrefix()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return default;
		}

		public override Task<uint> ReadLevelPrefixAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<uint>(default);
		}

		public override uint ReadLevelSuffix()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return default;
		}

		public override Task<uint> ReadLevelSuffixAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<uint>(default);
		}

		public override uint ReadTotalZeros()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return default;
		}

		public override Task<uint> ReadTotalZerosAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<uint>(default);
		}

		public override uint ReadRunBefore()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return default;
		}

		public override Task<uint> ReadRunBeforeAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<uint>(default);
		}

								}

	internal abstract class StrictlyCavlcReader : H264ReaderBase
	{
		public override bool UsesCabac => false;
		public override bool ReadMbSkipFlag()
		{
			StrictThrowHelper.ThrowCabacOnCavlc();
			return default;
		}

		public override Task<bool> ReadMbSkipFlagAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<bool>(default);
		}

			public override bool ReadEndOfSliceFlag()
		{
			StrictThrowHelper.ThrowCabacOnCavlc();
			return default;
		}

		public override Task<bool> ReadEndOfSliceFlagAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<bool>(default);
		}

																						public override bool ReadCodedBlockFlag()
		{
			StrictThrowHelper.ThrowCabacOnCavlc();
			return default;
		}

		public override Task<bool> ReadCodedBlockFlagAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<bool>(default);
		}

		public override bool ReadSignificantCoeffFlag()
		{
			StrictThrowHelper.ThrowCabacOnCavlc();
			return default;
		}

		public override Task<bool> ReadSignificantCoeffFlagAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<bool>(default);
		}

		public override bool ReadLastSignificantCoeffFlag()
		{
			StrictThrowHelper.ThrowCabacOnCavlc();
			return default;
		}

		public override Task<bool> ReadLastSignificantCoeffFlagAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<bool>(default);
		}

		public override uint ReadCoeffAbsLevelMinus1()
		{
			StrictThrowHelper.ThrowCabacOnCavlc();
			return default;
		}

		public override Task<uint> ReadCoeffAbsLevelMinus1Async()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<uint>(default);
		}

		public override bool ReadCoeffSignFlag()
		{
			StrictThrowHelper.ThrowCabacOnCavlc();
			return default;
		}

		public override Task<bool> ReadCoeffSignFlagAsync()
		{
			StrictThrowHelper.ThrowCavlcOnCabac();
			return Task.FromResult<bool>(default);
		}

			}
}