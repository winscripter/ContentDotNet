<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using static ContentDotNet.Extensions.Video.H264.Components.Common.PredictionModes;

namespace ContentDotNet.Extensions.Video.H264.Components.Common {

	using ContentDotNet.Extensions.Video.H264.Models;
	using ContentDotNet.Extensions.Video.H264.Enumerations;

	<#
		const string ITraits =
@"
0 I_NxN 0 Intra_4x4 na Equation7-38 Equation7-38 
0 I_NxN 1 Intra_8x8 na Equation7-38 Equation7-38 
1 I_16x16_0_0_0 na Intra_16x16 0 0 0 
2 I_16x16_1_0_0 na Intra_16x16 1 0 0 
3 I_16x16_2_0_0 na Intra_16x16 2 0 0 
4 I_16x16_3_0_0 na Intra_16x16 3 0 0 
5 I_16x16_0_1_0 na Intra_16x16 0 1 0 
6 I_16x16_1_1_0 na Intra_16x16 1 1 0 
7 I_16x16_2_1_0 na Intra_16x16 2 1 0 
8 I_16x16_3_1_0 na Intra_16x16 3 1 0 
9 I_16x16_0_2_0 na Intra_16x16 0 2 0 
10 I_16x16_1_2_0 na Intra_16x16 1 2 0 
11 I_16x16_2_2_0 na Intra_16x16 2 2 0 
12 I_16x16_3_2_0 na Intra_16x16 3 2 0 
13 I_16x16_0_0_1 na Intra_16x16 0 0 15 
14 I_16x16_1_0_1 na Intra_16x16 1 0 15 
15 I_16x16_2_0_1 na Intra_16x16 2 0 15 
16 I_16x16_3_0_1 na Intra_16x16 3 0 15 
17 I_16x16_0_1_1 na Intra_16x16 0 1 15 
18 I_16x16_1_1_1 na Intra_16x16 1 1 15 
19 I_16x16_2_1_1 na Intra_16x16 2 1 15 
20 I_16x16_3_1_1 na Intra_16x16 3 1 15 
21 I_16x16_0_2_1 na Intra_16x16 0 2 15 
22 I_16x16_1_2_1 na Intra_16x16 1 2 15 
23 I_16x16_2_2_1 na Intra_16x16 2 2 15 
24 I_16x16_3_2_1 na Intra_16x16 3 2 15 
25 I_PCM na na na na na
";

		const string SITraits =
@"
0 SI Intra_4x4 na Equation7-38 Equation7-38 
";

		const string PTraits =
@"
0 P_L0_16x16 1 Pred_L0 na 16 16
1 P_L0_L0_16x8 2 Pred_L0 Pred_L0 16 8
2 P_L0_L0_8x16 2 Pred_L0 Pred_L0 8 16
3 P_8x8 4 na na 8 8
4 P_8x8ref0 4 na na 8 8
";

		const string BTraits =
@"
0 B_Direct_16x16 na Direct na 8 8 
1 B_L0_16x16 1 Pred_L0 na 16 16 
2 B_L1_16x16 1 Pred_L1 na 16 16 
3 B_Bi_16x16 1 BiPred na 16 16 
4 B_L0_L0_16x8 2 Pred_L0 Pred_L0 16 8 
5 B_L0_L0_8x16 2 Pred_L0 Pred_L0 8 16 
6 B_L1_L1_16x8 2 Pred_L1 Pred_L1 16 8 
7 B_L1_L1_8x16 2 Pred_L1 Pred_L1 8 16 
8 B_L0_L1_16x8 2 Pred_L0 Pred_L1 16 8 
9 B_L0_L1_8x16 2 Pred_L0 Pred_L1 8 16 
10 B_L1_L0_16x8 2 Pred_L1 Pred_L0 16 8 
11 B_L1_L0_8x16 2 Pred_L1 Pred_L0 8 16 
12 B_L0_Bi_16x8 2 Pred_L0 BiPred 16 8 
13 B_L0_Bi_8x16 2 Pred_L0 BiPred 8 16 
14 B_L1_Bi_16x8 2 Pred_L1 BiPred 16 8 
15 B_L1_Bi_8x16 2 Pred_L1 BiPred 8 16 
16 B_Bi_L0_16x8 2 BiPred Pred_L0 16 8 
17 B_Bi_L0_8x16 2 BiPred Pred_L0 8 16 
18 B_Bi_L1_16x8 2 BiPred Pred_L1 16 8 
19 B_Bi_L1_8x16 2 BiPred Pred_L1 8 16 
20 B_Bi_Bi_16x8 2 BiPred BiPred 16 8 
21 B_Bi_Bi_8x16 2 BiPred BiPred 8 16 
22 B_8x8 4 na na 8 8
";

		const string SubPTraits =
@"
0 P_L0_8x8 1 Pred_L0 8 4
1 P_L0_8x4 2 Pred_L0 8 4
2 P_L0_4x8 2 Pred_L0 4 8
3 P_L0_4x4 4 Pred_L0 4 8
";

		const string SubBTraits =
@"
0 B_Direct_8x8 4 Direct 4 4
1 B_L0_8x8 1 Pred_L0 8 8
2 B_L1_8x8 1 Pred_L1 8 8
3 B_Bi_8x8 1 BiPred 8 8
4 B_L0_8x4 2 Pred_L0 8 4
5 B_L0_4x8 2 Pred_L0 4 8
6 B_L1_8x4 2 Pred_L1 8 4
7 B_L1_4x8 2 Pred_L1 4 8
8 B_Bi_8x4 2 BiPred 8 4
9 B_Bi_4x8 2 BiPred 4 8
10 B_L0_4x4 4 Pred_L0 4 4
11 B_L1_4x4 4 Pred_L1 4 4
12 B_Bi_4x4 4 BiPred 4 4
";

		List<string> alreadySeen = [];
	#>

	/// <summary>
	///   H.264 prediction modes
	/// </summary>
	public static class PredictionModes {
		<#
			int ctr = 0;
			foreach (string pm in new[] { "Intra_8x8", "Intra_16x16", "Intra_4x4", "Pred_L0", "Pred_L1", "BiPred", "Direct" })
			{
				ctr++;
		#>
		/// <summary>
		///   Value <#= pm #>, index <#= ctr - 1 #>.
		/// </summary>
		public const int <#= pm #> = <#= ctr - 1 #>;

		<# } #>

		/// <summary>
		///   Not an.
		/// </summary>
		public const int na = -1;
	}

	/// <summary>
	///   Common macroblock types.
	/// </summary>
	public static partial class MacroblockTypes
	{
	<#
		foreach (string line in ITraits.Split([Environment.NewLine], StringSplitOptions.None)) {
			if (string.IsNullOrWhiteSpace(line)) continue;
			string[] splitted = line.Split(' ');
			if (alreadySeen.Contains(splitted[1]))
				continue;
			else
				alreadySeen.Add(splitted[1]);
	#>
		/// <summary>
		///   Represents the value <c><#= splitted[1] #></c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType <#= splitted[1] #> = new(H264SliceType.I, <#= splitted[0] #>, false);

	<# } #>

	<#
		foreach (string line in BTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
			if (string.IsNullOrWhiteSpace(line)) continue;
			string[] splitted = line.Split(' ');
			if (alreadySeen.Contains(splitted[1]))
				continue;
			else
				alreadySeen.Add(splitted[1]);
	#>
		/// <summary>
		///   Represents the value <c><#= splitted[1] #></c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType <#= splitted[1] #> = new(H264SliceType.I, <#= splitted[0] #>, false);

	<# } #>

	<#
		foreach (string line in PTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
			if (string.IsNullOrWhiteSpace(line)) continue;
			string[] splitted = line.Split(' ');
			if (alreadySeen.Contains(splitted[1]))
				continue;
			else
				alreadySeen.Add(splitted[1]);
	#>
		/// <summary>
		///   Represents the value <c><#= splitted[1] #></c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType <#= splitted[1] #> = new(H264SliceType.I, <#= splitted[0] #>, false);

	<# } #>

	<#
		foreach (string line in SITraits.Split([Environment.NewLine], StringSplitOptions.None)) {
			if (string.IsNullOrWhiteSpace(line)) continue;
			string[] splitted = line.Split(' ');
			if (alreadySeen.Contains(splitted[1]))
				continue;
			else
				alreadySeen.Add(splitted[1]);
	#>
		/// <summary>
		///   Represents the value <c><#= splitted[1] #></c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType <#= splitted[1] #> = new(H264SliceType.I, <#= splitted[0] #>, false);

	<# } #>

	<#
		foreach (string line in SubPTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
			if (string.IsNullOrWhiteSpace(line)) continue;
			string[] splitted = line.Split(' ');
			if (alreadySeen.Contains(splitted[1]))
				continue;
			else
				alreadySeen.Add(splitted[1]);
	#>
		/// <summary>
		///   Represents the value <c><#= splitted[1] #></c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType <#= splitted[1] #> = new(H264SliceType.I, <#= splitted[0] #>, false);

	<# } #>

	<#
		foreach (string line in SubBTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
			if (string.IsNullOrWhiteSpace(line)) continue;
			string[] splitted = line.Split(' ');
			if (alreadySeen.Contains(splitted[1]))
				continue;
			else
				alreadySeen.Add(splitted[1]);
	#>
		/// <summary>
		///   Represents the value <c><#= splitted[1] #></c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType <#= splitted[1] #> = new(H264SliceType.I, <#= splitted[0] #>, false);

	<# } #>
	}

	/// <summary>
	///   Describes and derives common macroblock information.
	/// </summary>
	public static partial class MacroblockTraits {
		private static int I_MbPartPredMode_0(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in ITraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
				string ts8x8 = splitted[2] == "na" ? "" : splitted[2] == "0" ? " && !transformSize8x8Flag" : " && transformSize8x8Flag";
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #><#= ts8x8 #>) {
				return <#= splitted[3] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}
	
		private static int? I_GetPredMode(int mbType, bool transformSize8x8Flag) {
		<#
			foreach (string line in ITraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
				string ts8x8 = splitted[2] == "na" ? "" : splitted[2] == "0" ? " && !transformSize8x8Flag" : " && transformSize8x8Flag";
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #><#= ts8x8 #>) {
				return <#= splitted[4] == "na" ? "null" : splitted[4] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? I_GetCbpL(int mbType, bool transformSize8x8Flag) {
		<#
			foreach (string line in ITraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
				string ts8x8 = splitted[2] == "na" ? "" : splitted[2] == "0" ? " && !transformSize8x8Flag" : " && transformSize8x8Flag";
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #><#= ts8x8 #>) {
				return <#= splitted[5].StartsWith("Equ") ? "null" : splitted[5] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? I_CbpC(int mbType, bool transformSize8x8Flag) {
		<#
			foreach (string line in ITraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
				string ts8x8 = splitted[2] == "na" ? "" : splitted[2] == "0" ? " && !transformSize8x8Flag" : " && transformSize8x8Flag";
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #><#= ts8x8 #>) {
				return <#= splitted[6].StartsWith("Equ") ? "null" : splitted[6] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_GetNumMbPart(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in PTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[2] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartPredMode_0(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in PTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[3] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartPredMode_1(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in PTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[4] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartWidth(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in PTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[5] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartHeight(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in PTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[6] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_GetNumMbPart(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in BTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[2] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartPredMode_0(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in BTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[3] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartPredMode_1(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in BTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[4] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartWidth(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in BTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[5] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartHeight(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in BTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[6] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_NumSubMbPart(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubPTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[2] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_SubMbPredMode(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubPTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[3] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_SubMbPartWidth(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubPTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[4] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_SubMbPartHeight(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubPTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[5] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_NumSubMbPart(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubBTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[2] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_SubMbPredMode(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubBTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[3] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_SubMbPartWidth(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubBTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[4] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_SubMbPartHeight(bool transformSize8x8Flag, int mbType) {
		<#
			foreach (string line in SubBTraits.Split([Environment.NewLine], StringSplitOptions.None)) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				string[] splitted = line.Split(' ');
				alreadySeen = [];
				if (alreadySeen.Contains(splitted[1]))
					continue;
				else
					alreadySeen.Add(splitted[1]);
		#>
			// <#= splitted[1] #>
			if (mbType == <#= splitted[0] #>) {
				return <#= splitted[5] #>;
			}
		<# } #>
			throw new InvalidOperationException("Invalid or unrecognizable input");
		}
	}
}
