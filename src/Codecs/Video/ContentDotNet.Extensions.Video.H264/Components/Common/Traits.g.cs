//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using static ContentDotNet.Extensions.Video.H264.Components.Common.PredictionModes;

namespace ContentDotNet.Extensions.Video.H264.Components.Common {

	using ContentDotNet.Extensions.Video.H264.Models;
	using ContentDotNet.Extensions.Video.H264.Enumerations;

	
	/// <summary>
	///   H.264 prediction modes
	/// </summary>
	public static class PredictionModes {
				/// <summary>
		///   Value Intra_8x8, index 0.
		/// </summary>
		public const int Intra_8x8 = 0;

				/// <summary>
		///   Value Intra_16x16, index 1.
		/// </summary>
		public const int Intra_16x16 = 1;

				/// <summary>
		///   Value Intra_4x4, index 2.
		/// </summary>
		public const int Intra_4x4 = 2;

				/// <summary>
		///   Value Pred_L0, index 3.
		/// </summary>
		public const int Pred_L0 = 3;

				/// <summary>
		///   Value Pred_L1, index 4.
		/// </summary>
		public const int Pred_L1 = 4;

				/// <summary>
		///   Value BiPred, index 5.
		/// </summary>
		public const int BiPred = 5;

				/// <summary>
		///   Value Direct, index 6.
		/// </summary>
		public const int Direct = 6;

		
		/// <summary>
		///   Not an.
		/// </summary>
		public const int na = -1;
	}

	/// <summary>
	///   Common macroblock types.
	/// </summary>
	public static partial class MacroblockTypes
	{
			/// <summary>
		///   Represents the value <c>I_NxN</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_NxN = new(H264SliceType.I, 0, false);

			/// <summary>
		///   Represents the value <c>I_16x16_0_0_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_0_0_0 = new(H264SliceType.I, 1, false);

			/// <summary>
		///   Represents the value <c>I_16x16_1_0_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_1_0_0 = new(H264SliceType.I, 2, false);

			/// <summary>
		///   Represents the value <c>I_16x16_2_0_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_2_0_0 = new(H264SliceType.I, 3, false);

			/// <summary>
		///   Represents the value <c>I_16x16_3_0_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_3_0_0 = new(H264SliceType.I, 4, false);

			/// <summary>
		///   Represents the value <c>I_16x16_0_1_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_0_1_0 = new(H264SliceType.I, 5, false);

			/// <summary>
		///   Represents the value <c>I_16x16_1_1_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_1_1_0 = new(H264SliceType.I, 6, false);

			/// <summary>
		///   Represents the value <c>I_16x16_2_1_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_2_1_0 = new(H264SliceType.I, 7, false);

			/// <summary>
		///   Represents the value <c>I_16x16_3_1_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_3_1_0 = new(H264SliceType.I, 8, false);

			/// <summary>
		///   Represents the value <c>I_16x16_0_2_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_0_2_0 = new(H264SliceType.I, 9, false);

			/// <summary>
		///   Represents the value <c>I_16x16_1_2_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_1_2_0 = new(H264SliceType.I, 10, false);

			/// <summary>
		///   Represents the value <c>I_16x16_2_2_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_2_2_0 = new(H264SliceType.I, 11, false);

			/// <summary>
		///   Represents the value <c>I_16x16_3_2_0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_3_2_0 = new(H264SliceType.I, 12, false);

			/// <summary>
		///   Represents the value <c>I_16x16_0_0_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_0_0_1 = new(H264SliceType.I, 13, false);

			/// <summary>
		///   Represents the value <c>I_16x16_1_0_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_1_0_1 = new(H264SliceType.I, 14, false);

			/// <summary>
		///   Represents the value <c>I_16x16_2_0_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_2_0_1 = new(H264SliceType.I, 15, false);

			/// <summary>
		///   Represents the value <c>I_16x16_3_0_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_3_0_1 = new(H264SliceType.I, 16, false);

			/// <summary>
		///   Represents the value <c>I_16x16_0_1_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_0_1_1 = new(H264SliceType.I, 17, false);

			/// <summary>
		///   Represents the value <c>I_16x16_1_1_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_1_1_1 = new(H264SliceType.I, 18, false);

			/// <summary>
		///   Represents the value <c>I_16x16_2_1_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_2_1_1 = new(H264SliceType.I, 19, false);

			/// <summary>
		///   Represents the value <c>I_16x16_3_1_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_3_1_1 = new(H264SliceType.I, 20, false);

			/// <summary>
		///   Represents the value <c>I_16x16_0_2_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_0_2_1 = new(H264SliceType.I, 21, false);

			/// <summary>
		///   Represents the value <c>I_16x16_1_2_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_1_2_1 = new(H264SliceType.I, 22, false);

			/// <summary>
		///   Represents the value <c>I_16x16_2_2_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_2_2_1 = new(H264SliceType.I, 23, false);

			/// <summary>
		///   Represents the value <c>I_16x16_3_2_1</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_16x16_3_2_1 = new(H264SliceType.I, 24, false);

			/// <summary>
		///   Represents the value <c>I_PCM</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType I_PCM = new(H264SliceType.I, 25, false);

	
			/// <summary>
		///   Represents the value <c>B_Direct_16x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Direct_16x16 = new(H264SliceType.I, 0, false);

			/// <summary>
		///   Represents the value <c>B_L0_16x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_16x16 = new(H264SliceType.I, 1, false);

			/// <summary>
		///   Represents the value <c>B_L1_16x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_16x16 = new(H264SliceType.I, 2, false);

			/// <summary>
		///   Represents the value <c>B_Bi_16x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_16x16 = new(H264SliceType.I, 3, false);

			/// <summary>
		///   Represents the value <c>B_L0_L0_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_L0_16x8 = new(H264SliceType.I, 4, false);

			/// <summary>
		///   Represents the value <c>B_L0_L0_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_L0_8x16 = new(H264SliceType.I, 5, false);

			/// <summary>
		///   Represents the value <c>B_L1_L1_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_L1_16x8 = new(H264SliceType.I, 6, false);

			/// <summary>
		///   Represents the value <c>B_L1_L1_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_L1_8x16 = new(H264SliceType.I, 7, false);

			/// <summary>
		///   Represents the value <c>B_L0_L1_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_L1_16x8 = new(H264SliceType.I, 8, false);

			/// <summary>
		///   Represents the value <c>B_L0_L1_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_L1_8x16 = new(H264SliceType.I, 9, false);

			/// <summary>
		///   Represents the value <c>B_L1_L0_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_L0_16x8 = new(H264SliceType.I, 10, false);

			/// <summary>
		///   Represents the value <c>B_L1_L0_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_L0_8x16 = new(H264SliceType.I, 11, false);

			/// <summary>
		///   Represents the value <c>B_L0_Bi_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_Bi_16x8 = new(H264SliceType.I, 12, false);

			/// <summary>
		///   Represents the value <c>B_L0_Bi_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_Bi_8x16 = new(H264SliceType.I, 13, false);

			/// <summary>
		///   Represents the value <c>B_L1_Bi_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_Bi_16x8 = new(H264SliceType.I, 14, false);

			/// <summary>
		///   Represents the value <c>B_L1_Bi_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_Bi_8x16 = new(H264SliceType.I, 15, false);

			/// <summary>
		///   Represents the value <c>B_Bi_L0_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_L0_16x8 = new(H264SliceType.I, 16, false);

			/// <summary>
		///   Represents the value <c>B_Bi_L0_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_L0_8x16 = new(H264SliceType.I, 17, false);

			/// <summary>
		///   Represents the value <c>B_Bi_L1_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_L1_16x8 = new(H264SliceType.I, 18, false);

			/// <summary>
		///   Represents the value <c>B_Bi_L1_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_L1_8x16 = new(H264SliceType.I, 19, false);

			/// <summary>
		///   Represents the value <c>B_Bi_Bi_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_Bi_16x8 = new(H264SliceType.I, 20, false);

			/// <summary>
		///   Represents the value <c>B_Bi_Bi_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_Bi_8x16 = new(H264SliceType.I, 21, false);

			/// <summary>
		///   Represents the value <c>B_8x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_8x8 = new(H264SliceType.I, 22, false);

	
			/// <summary>
		///   Represents the value <c>P_L0_16x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_L0_16x16 = new(H264SliceType.I, 0, false);

			/// <summary>
		///   Represents the value <c>P_L0_L0_16x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_L0_L0_16x8 = new(H264SliceType.I, 1, false);

			/// <summary>
		///   Represents the value <c>P_L0_L0_8x16</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_L0_L0_8x16 = new(H264SliceType.I, 2, false);

			/// <summary>
		///   Represents the value <c>P_8x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_8x8 = new(H264SliceType.I, 3, false);

			/// <summary>
		///   Represents the value <c>P_8x8ref0</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_8x8ref0 = new(H264SliceType.I, 4, false);

	
			/// <summary>
		///   Represents the value <c>SI</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType SI = new(H264SliceType.I, 0, false);

	
			/// <summary>
		///   Represents the value <c>P_L0_8x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_L0_8x8 = new(H264SliceType.I, 0, false);

			/// <summary>
		///   Represents the value <c>P_L0_8x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_L0_8x4 = new(H264SliceType.I, 1, false);

			/// <summary>
		///   Represents the value <c>P_L0_4x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_L0_4x8 = new(H264SliceType.I, 2, false);

			/// <summary>
		///   Represents the value <c>P_L0_4x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType P_L0_4x4 = new(H264SliceType.I, 3, false);

	
			/// <summary>
		///   Represents the value <c>B_Direct_8x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Direct_8x8 = new(H264SliceType.I, 0, false);

			/// <summary>
		///   Represents the value <c>B_L0_8x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_8x8 = new(H264SliceType.I, 1, false);

			/// <summary>
		///   Represents the value <c>B_L1_8x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_8x8 = new(H264SliceType.I, 2, false);

			/// <summary>
		///   Represents the value <c>B_Bi_8x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_8x8 = new(H264SliceType.I, 3, false);

			/// <summary>
		///   Represents the value <c>B_L0_8x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_8x4 = new(H264SliceType.I, 4, false);

			/// <summary>
		///   Represents the value <c>B_L0_4x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_4x8 = new(H264SliceType.I, 5, false);

			/// <summary>
		///   Represents the value <c>B_L1_8x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_8x4 = new(H264SliceType.I, 6, false);

			/// <summary>
		///   Represents the value <c>B_L1_4x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_4x8 = new(H264SliceType.I, 7, false);

			/// <summary>
		///   Represents the value <c>B_Bi_8x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_8x4 = new(H264SliceType.I, 8, false);

			/// <summary>
		///   Represents the value <c>B_Bi_4x8</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_4x8 = new(H264SliceType.I, 9, false);

			/// <summary>
		///   Represents the value <c>B_L0_4x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L0_4x4 = new(H264SliceType.I, 10, false);

			/// <summary>
		///   Represents the value <c>B_L1_4x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_L1_4x4 = new(H264SliceType.I, 11, false);

			/// <summary>
		///   Represents the value <c>B_Bi_4x4</c>.
		/// </summary>
		/// <remarks>
		///   This defines a combination of a slice type and a macroblock type.
		/// </remarks>
		public static readonly H264MacroblockType B_Bi_4x4 = new(H264SliceType.I, 12, false);

		}

	/// <summary>
	///   Describes and derives common macroblock information.
	/// </summary>
	public static partial class MacroblockTraits {
		private static int I_MbPartPredMode_0(bool transformSize8x8Flag, int mbType) {
					// I_NxN
			if (mbType == 0 && !transformSize8x8Flag) {
				return Intra_4x4;
			}
					// I_NxN
			if (mbType == 0 && transformSize8x8Flag) {
				return Intra_8x8;
			}
					// I_16x16_0_0_0
			if (mbType == 1) {
				return Intra_16x16;
			}
					// I_16x16_1_0_0
			if (mbType == 2) {
				return Intra_16x16;
			}
					// I_16x16_2_0_0
			if (mbType == 3) {
				return Intra_16x16;
			}
					// I_16x16_3_0_0
			if (mbType == 4) {
				return Intra_16x16;
			}
					// I_16x16_0_1_0
			if (mbType == 5) {
				return Intra_16x16;
			}
					// I_16x16_1_1_0
			if (mbType == 6) {
				return Intra_16x16;
			}
					// I_16x16_2_1_0
			if (mbType == 7) {
				return Intra_16x16;
			}
					// I_16x16_3_1_0
			if (mbType == 8) {
				return Intra_16x16;
			}
					// I_16x16_0_2_0
			if (mbType == 9) {
				return Intra_16x16;
			}
					// I_16x16_1_2_0
			if (mbType == 10) {
				return Intra_16x16;
			}
					// I_16x16_2_2_0
			if (mbType == 11) {
				return Intra_16x16;
			}
					// I_16x16_3_2_0
			if (mbType == 12) {
				return Intra_16x16;
			}
					// I_16x16_0_0_1
			if (mbType == 13) {
				return Intra_16x16;
			}
					// I_16x16_1_0_1
			if (mbType == 14) {
				return Intra_16x16;
			}
					// I_16x16_2_0_1
			if (mbType == 15) {
				return Intra_16x16;
			}
					// I_16x16_3_0_1
			if (mbType == 16) {
				return Intra_16x16;
			}
					// I_16x16_0_1_1
			if (mbType == 17) {
				return Intra_16x16;
			}
					// I_16x16_1_1_1
			if (mbType == 18) {
				return Intra_16x16;
			}
					// I_16x16_2_1_1
			if (mbType == 19) {
				return Intra_16x16;
			}
					// I_16x16_3_1_1
			if (mbType == 20) {
				return Intra_16x16;
			}
					// I_16x16_0_2_1
			if (mbType == 21) {
				return Intra_16x16;
			}
					// I_16x16_1_2_1
			if (mbType == 22) {
				return Intra_16x16;
			}
					// I_16x16_2_2_1
			if (mbType == 23) {
				return Intra_16x16;
			}
					// I_16x16_3_2_1
			if (mbType == 24) {
				return Intra_16x16;
			}
					// I_PCM
			if (mbType == 25) {
				return na;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}
	
		private static int? I_GetPredMode(int mbType, bool transformSize8x8Flag) {
					// I_NxN
			if (mbType == 0 && !transformSize8x8Flag) {
				return null;
			}
					// I_NxN
			if (mbType == 0 && transformSize8x8Flag) {
				return null;
			}
					// I_16x16_0_0_0
			if (mbType == 1) {
				return 0;
			}
					// I_16x16_1_0_0
			if (mbType == 2) {
				return 1;
			}
					// I_16x16_2_0_0
			if (mbType == 3) {
				return 2;
			}
					// I_16x16_3_0_0
			if (mbType == 4) {
				return 3;
			}
					// I_16x16_0_1_0
			if (mbType == 5) {
				return 0;
			}
					// I_16x16_1_1_0
			if (mbType == 6) {
				return 1;
			}
					// I_16x16_2_1_0
			if (mbType == 7) {
				return 2;
			}
					// I_16x16_3_1_0
			if (mbType == 8) {
				return 3;
			}
					// I_16x16_0_2_0
			if (mbType == 9) {
				return 0;
			}
					// I_16x16_1_2_0
			if (mbType == 10) {
				return 1;
			}
					// I_16x16_2_2_0
			if (mbType == 11) {
				return 2;
			}
					// I_16x16_3_2_0
			if (mbType == 12) {
				return 3;
			}
					// I_16x16_0_0_1
			if (mbType == 13) {
				return 0;
			}
					// I_16x16_1_0_1
			if (mbType == 14) {
				return 1;
			}
					// I_16x16_2_0_1
			if (mbType == 15) {
				return 2;
			}
					// I_16x16_3_0_1
			if (mbType == 16) {
				return 3;
			}
					// I_16x16_0_1_1
			if (mbType == 17) {
				return 0;
			}
					// I_16x16_1_1_1
			if (mbType == 18) {
				return 1;
			}
					// I_16x16_2_1_1
			if (mbType == 19) {
				return 2;
			}
					// I_16x16_3_1_1
			if (mbType == 20) {
				return 3;
			}
					// I_16x16_0_2_1
			if (mbType == 21) {
				return 0;
			}
					// I_16x16_1_2_1
			if (mbType == 22) {
				return 1;
			}
					// I_16x16_2_2_1
			if (mbType == 23) {
				return 2;
			}
					// I_16x16_3_2_1
			if (mbType == 24) {
				return 3;
			}
					// I_PCM
			if (mbType == 25) {
				return null;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? I_GetCbpL(int mbType, bool transformSize8x8Flag) {
					// I_NxN
			if (mbType == 0 && !transformSize8x8Flag) {
				return null;
			}
					// I_NxN
			if (mbType == 0 && transformSize8x8Flag) {
				return null;
			}
					// I_16x16_0_0_0
			if (mbType == 1) {
				return 0;
			}
					// I_16x16_1_0_0
			if (mbType == 2) {
				return 0;
			}
					// I_16x16_2_0_0
			if (mbType == 3) {
				return 0;
			}
					// I_16x16_3_0_0
			if (mbType == 4) {
				return 0;
			}
					// I_16x16_0_1_0
			if (mbType == 5) {
				return 1;
			}
					// I_16x16_1_1_0
			if (mbType == 6) {
				return 1;
			}
					// I_16x16_2_1_0
			if (mbType == 7) {
				return 1;
			}
					// I_16x16_3_1_0
			if (mbType == 8) {
				return 1;
			}
					// I_16x16_0_2_0
			if (mbType == 9) {
				return 2;
			}
					// I_16x16_1_2_0
			if (mbType == 10) {
				return 2;
			}
					// I_16x16_2_2_0
			if (mbType == 11) {
				return 2;
			}
					// I_16x16_3_2_0
			if (mbType == 12) {
				return 2;
			}
					// I_16x16_0_0_1
			if (mbType == 13) {
				return 0;
			}
					// I_16x16_1_0_1
			if (mbType == 14) {
				return 0;
			}
					// I_16x16_2_0_1
			if (mbType == 15) {
				return 0;
			}
					// I_16x16_3_0_1
			if (mbType == 16) {
				return 0;
			}
					// I_16x16_0_1_1
			if (mbType == 17) {
				return 1;
			}
					// I_16x16_1_1_1
			if (mbType == 18) {
				return 1;
			}
					// I_16x16_2_1_1
			if (mbType == 19) {
				return 1;
			}
					// I_16x16_3_1_1
			if (mbType == 20) {
				return 1;
			}
					// I_16x16_0_2_1
			if (mbType == 21) {
				return 2;
			}
					// I_16x16_1_2_1
			if (mbType == 22) {
				return 2;
			}
					// I_16x16_2_2_1
			if (mbType == 23) {
				return 2;
			}
					// I_16x16_3_2_1
			if (mbType == 24) {
				return 2;
			}
					// I_PCM
			if (mbType == 25) {
				return na;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? I_CbpC(int mbType, bool transformSize8x8Flag) {
					// I_NxN
			if (mbType == 0 && !transformSize8x8Flag) {
				return null;
			}
					// I_NxN
			if (mbType == 0 && transformSize8x8Flag) {
				return null;
			}
					// I_16x16_0_0_0
			if (mbType == 1) {
				return 0;
			}
					// I_16x16_1_0_0
			if (mbType == 2) {
				return 0;
			}
					// I_16x16_2_0_0
			if (mbType == 3) {
				return 0;
			}
					// I_16x16_3_0_0
			if (mbType == 4) {
				return 0;
			}
					// I_16x16_0_1_0
			if (mbType == 5) {
				return 0;
			}
					// I_16x16_1_1_0
			if (mbType == 6) {
				return 0;
			}
					// I_16x16_2_1_0
			if (mbType == 7) {
				return 0;
			}
					// I_16x16_3_1_0
			if (mbType == 8) {
				return 0;
			}
					// I_16x16_0_2_0
			if (mbType == 9) {
				return 0;
			}
					// I_16x16_1_2_0
			if (mbType == 10) {
				return 0;
			}
					// I_16x16_2_2_0
			if (mbType == 11) {
				return 0;
			}
					// I_16x16_3_2_0
			if (mbType == 12) {
				return 0;
			}
					// I_16x16_0_0_1
			if (mbType == 13) {
				return 15;
			}
					// I_16x16_1_0_1
			if (mbType == 14) {
				return 15;
			}
					// I_16x16_2_0_1
			if (mbType == 15) {
				return 15;
			}
					// I_16x16_3_0_1
			if (mbType == 16) {
				return 15;
			}
					// I_16x16_0_1_1
			if (mbType == 17) {
				return 15;
			}
					// I_16x16_1_1_1
			if (mbType == 18) {
				return 15;
			}
					// I_16x16_2_1_1
			if (mbType == 19) {
				return 15;
			}
					// I_16x16_3_1_1
			if (mbType == 20) {
				return 15;
			}
					// I_16x16_0_2_1
			if (mbType == 21) {
				return 15;
			}
					// I_16x16_1_2_1
			if (mbType == 22) {
				return 15;
			}
					// I_16x16_2_2_1
			if (mbType == 23) {
				return 15;
			}
					// I_16x16_3_2_1
			if (mbType == 24) {
				return 15;
			}
					// I_PCM
			if (mbType == 25) {
				return na;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_GetNumMbPart(bool transformSize8x8Flag, int mbType) {
					// P_L0_16x16
			if (mbType == 0) {
				return 1;
			}
					// P_L0_L0_16x8
			if (mbType == 1) {
				return 2;
			}
					// P_L0_L0_8x16
			if (mbType == 2) {
				return 2;
			}
					// P_8x8
			if (mbType == 3) {
				return 4;
			}
					// P_8x8ref0
			if (mbType == 4) {
				return 4;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartPredMode_0(bool transformSize8x8Flag, int mbType) {
					// P_L0_16x16
			if (mbType == 0) {
				return Pred_L0;
			}
					// P_L0_L0_16x8
			if (mbType == 1) {
				return Pred_L0;
			}
					// P_L0_L0_8x16
			if (mbType == 2) {
				return Pred_L0;
			}
					// P_8x8
			if (mbType == 3) {
				return na;
			}
					// P_8x8ref0
			if (mbType == 4) {
				return na;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartPredMode_1(bool transformSize8x8Flag, int mbType) {
					// P_L0_16x16
			if (mbType == 0) {
				return na;
			}
					// P_L0_L0_16x8
			if (mbType == 1) {
				return Pred_L0;
			}
					// P_L0_L0_8x16
			if (mbType == 2) {
				return Pred_L0;
			}
					// P_8x8
			if (mbType == 3) {
				return na;
			}
					// P_8x8ref0
			if (mbType == 4) {
				return na;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartWidth(bool transformSize8x8Flag, int mbType) {
					// P_L0_16x16
			if (mbType == 0) {
				return 16;
			}
					// P_L0_L0_16x8
			if (mbType == 1) {
				return 16;
			}
					// P_L0_L0_8x16
			if (mbType == 2) {
				return 8;
			}
					// P_8x8
			if (mbType == 3) {
				return 8;
			}
					// P_8x8ref0
			if (mbType == 4) {
				return 8;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? P_MbPartHeight(bool transformSize8x8Flag, int mbType) {
					// P_L0_16x16
			if (mbType == 0) {
				return 16;
			}
					// P_L0_L0_16x8
			if (mbType == 1) {
				return 8;
			}
					// P_L0_L0_8x16
			if (mbType == 2) {
				return 16;
			}
					// P_8x8
			if (mbType == 3) {
				return 8;
			}
					// P_8x8ref0
			if (mbType == 4) {
				return 8;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_GetNumMbPart(bool transformSize8x8Flag, int mbType) {
					// B_Direct_16x16
			if (mbType == 0) {
				return na;
			}
					// B_L0_16x16
			if (mbType == 1) {
				return 1;
			}
					// B_L1_16x16
			if (mbType == 2) {
				return 1;
			}
					// B_Bi_16x16
			if (mbType == 3) {
				return 1;
			}
					// B_L0_L0_16x8
			if (mbType == 4) {
				return 2;
			}
					// B_L0_L0_8x16
			if (mbType == 5) {
				return 2;
			}
					// B_L1_L1_16x8
			if (mbType == 6) {
				return 2;
			}
					// B_L1_L1_8x16
			if (mbType == 7) {
				return 2;
			}
					// B_L0_L1_16x8
			if (mbType == 8) {
				return 2;
			}
					// B_L0_L1_8x16
			if (mbType == 9) {
				return 2;
			}
					// B_L1_L0_16x8
			if (mbType == 10) {
				return 2;
			}
					// B_L1_L0_8x16
			if (mbType == 11) {
				return 2;
			}
					// B_L0_Bi_16x8
			if (mbType == 12) {
				return 2;
			}
					// B_L0_Bi_8x16
			if (mbType == 13) {
				return 2;
			}
					// B_L1_Bi_16x8
			if (mbType == 14) {
				return 2;
			}
					// B_L1_Bi_8x16
			if (mbType == 15) {
				return 2;
			}
					// B_Bi_L0_16x8
			if (mbType == 16) {
				return 2;
			}
					// B_Bi_L0_8x16
			if (mbType == 17) {
				return 2;
			}
					// B_Bi_L1_16x8
			if (mbType == 18) {
				return 2;
			}
					// B_Bi_L1_8x16
			if (mbType == 19) {
				return 2;
			}
					// B_Bi_Bi_16x8
			if (mbType == 20) {
				return 2;
			}
					// B_Bi_Bi_8x16
			if (mbType == 21) {
				return 2;
			}
					// B_8x8
			if (mbType == 22) {
				return 4;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartPredMode_0(bool transformSize8x8Flag, int mbType) {
					// B_Direct_16x16
			if (mbType == 0) {
				return Direct;
			}
					// B_L0_16x16
			if (mbType == 1) {
				return Pred_L0;
			}
					// B_L1_16x16
			if (mbType == 2) {
				return Pred_L1;
			}
					// B_Bi_16x16
			if (mbType == 3) {
				return BiPred;
			}
					// B_L0_L0_16x8
			if (mbType == 4) {
				return Pred_L0;
			}
					// B_L0_L0_8x16
			if (mbType == 5) {
				return Pred_L0;
			}
					// B_L1_L1_16x8
			if (mbType == 6) {
				return Pred_L1;
			}
					// B_L1_L1_8x16
			if (mbType == 7) {
				return Pred_L1;
			}
					// B_L0_L1_16x8
			if (mbType == 8) {
				return Pred_L0;
			}
					// B_L0_L1_8x16
			if (mbType == 9) {
				return Pred_L0;
			}
					// B_L1_L0_16x8
			if (mbType == 10) {
				return Pred_L1;
			}
					// B_L1_L0_8x16
			if (mbType == 11) {
				return Pred_L1;
			}
					// B_L0_Bi_16x8
			if (mbType == 12) {
				return Pred_L0;
			}
					// B_L0_Bi_8x16
			if (mbType == 13) {
				return Pred_L0;
			}
					// B_L1_Bi_16x8
			if (mbType == 14) {
				return Pred_L1;
			}
					// B_L1_Bi_8x16
			if (mbType == 15) {
				return Pred_L1;
			}
					// B_Bi_L0_16x8
			if (mbType == 16) {
				return BiPred;
			}
					// B_Bi_L0_8x16
			if (mbType == 17) {
				return BiPred;
			}
					// B_Bi_L1_16x8
			if (mbType == 18) {
				return BiPred;
			}
					// B_Bi_L1_8x16
			if (mbType == 19) {
				return BiPred;
			}
					// B_Bi_Bi_16x8
			if (mbType == 20) {
				return BiPred;
			}
					// B_Bi_Bi_8x16
			if (mbType == 21) {
				return BiPred;
			}
					// B_8x8
			if (mbType == 22) {
				return na;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartPredMode_1(bool transformSize8x8Flag, int mbType) {
					// B_Direct_16x16
			if (mbType == 0) {
				return na;
			}
					// B_L0_16x16
			if (mbType == 1) {
				return na;
			}
					// B_L1_16x16
			if (mbType == 2) {
				return na;
			}
					// B_Bi_16x16
			if (mbType == 3) {
				return na;
			}
					// B_L0_L0_16x8
			if (mbType == 4) {
				return Pred_L0;
			}
					// B_L0_L0_8x16
			if (mbType == 5) {
				return Pred_L0;
			}
					// B_L1_L1_16x8
			if (mbType == 6) {
				return Pred_L1;
			}
					// B_L1_L1_8x16
			if (mbType == 7) {
				return Pred_L1;
			}
					// B_L0_L1_16x8
			if (mbType == 8) {
				return Pred_L1;
			}
					// B_L0_L1_8x16
			if (mbType == 9) {
				return Pred_L1;
			}
					// B_L1_L0_16x8
			if (mbType == 10) {
				return Pred_L0;
			}
					// B_L1_L0_8x16
			if (mbType == 11) {
				return Pred_L0;
			}
					// B_L0_Bi_16x8
			if (mbType == 12) {
				return BiPred;
			}
					// B_L0_Bi_8x16
			if (mbType == 13) {
				return BiPred;
			}
					// B_L1_Bi_16x8
			if (mbType == 14) {
				return BiPred;
			}
					// B_L1_Bi_8x16
			if (mbType == 15) {
				return BiPred;
			}
					// B_Bi_L0_16x8
			if (mbType == 16) {
				return Pred_L0;
			}
					// B_Bi_L0_8x16
			if (mbType == 17) {
				return Pred_L0;
			}
					// B_Bi_L1_16x8
			if (mbType == 18) {
				return Pred_L1;
			}
					// B_Bi_L1_8x16
			if (mbType == 19) {
				return Pred_L1;
			}
					// B_Bi_Bi_16x8
			if (mbType == 20) {
				return BiPred;
			}
					// B_Bi_Bi_8x16
			if (mbType == 21) {
				return BiPred;
			}
					// B_8x8
			if (mbType == 22) {
				return na;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartWidth(bool transformSize8x8Flag, int mbType) {
					// B_Direct_16x16
			if (mbType == 0) {
				return 8;
			}
					// B_L0_16x16
			if (mbType == 1) {
				return 16;
			}
					// B_L1_16x16
			if (mbType == 2) {
				return 16;
			}
					// B_Bi_16x16
			if (mbType == 3) {
				return 16;
			}
					// B_L0_L0_16x8
			if (mbType == 4) {
				return 16;
			}
					// B_L0_L0_8x16
			if (mbType == 5) {
				return 8;
			}
					// B_L1_L1_16x8
			if (mbType == 6) {
				return 16;
			}
					// B_L1_L1_8x16
			if (mbType == 7) {
				return 8;
			}
					// B_L0_L1_16x8
			if (mbType == 8) {
				return 16;
			}
					// B_L0_L1_8x16
			if (mbType == 9) {
				return 8;
			}
					// B_L1_L0_16x8
			if (mbType == 10) {
				return 16;
			}
					// B_L1_L0_8x16
			if (mbType == 11) {
				return 8;
			}
					// B_L0_Bi_16x8
			if (mbType == 12) {
				return 16;
			}
					// B_L0_Bi_8x16
			if (mbType == 13) {
				return 8;
			}
					// B_L1_Bi_16x8
			if (mbType == 14) {
				return 16;
			}
					// B_L1_Bi_8x16
			if (mbType == 15) {
				return 8;
			}
					// B_Bi_L0_16x8
			if (mbType == 16) {
				return 16;
			}
					// B_Bi_L0_8x16
			if (mbType == 17) {
				return 8;
			}
					// B_Bi_L1_16x8
			if (mbType == 18) {
				return 16;
			}
					// B_Bi_L1_8x16
			if (mbType == 19) {
				return 8;
			}
					// B_Bi_Bi_16x8
			if (mbType == 20) {
				return 16;
			}
					// B_Bi_Bi_8x16
			if (mbType == 21) {
				return 8;
			}
					// B_8x8
			if (mbType == 22) {
				return 8;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int? B_MbPartHeight(bool transformSize8x8Flag, int mbType) {
					// B_Direct_16x16
			if (mbType == 0) {
				return 8;
			}
					// B_L0_16x16
			if (mbType == 1) {
				return 16;
			}
					// B_L1_16x16
			if (mbType == 2) {
				return 16;
			}
					// B_Bi_16x16
			if (mbType == 3) {
				return 16;
			}
					// B_L0_L0_16x8
			if (mbType == 4) {
				return 8;
			}
					// B_L0_L0_8x16
			if (mbType == 5) {
				return 16;
			}
					// B_L1_L1_16x8
			if (mbType == 6) {
				return 8;
			}
					// B_L1_L1_8x16
			if (mbType == 7) {
				return 16;
			}
					// B_L0_L1_16x8
			if (mbType == 8) {
				return 8;
			}
					// B_L0_L1_8x16
			if (mbType == 9) {
				return 16;
			}
					// B_L1_L0_16x8
			if (mbType == 10) {
				return 8;
			}
					// B_L1_L0_8x16
			if (mbType == 11) {
				return 16;
			}
					// B_L0_Bi_16x8
			if (mbType == 12) {
				return 8;
			}
					// B_L0_Bi_8x16
			if (mbType == 13) {
				return 16;
			}
					// B_L1_Bi_16x8
			if (mbType == 14) {
				return 8;
			}
					// B_L1_Bi_8x16
			if (mbType == 15) {
				return 16;
			}
					// B_Bi_L0_16x8
			if (mbType == 16) {
				return 8;
			}
					// B_Bi_L0_8x16
			if (mbType == 17) {
				return 16;
			}
					// B_Bi_L1_16x8
			if (mbType == 18) {
				return 8;
			}
					// B_Bi_L1_8x16
			if (mbType == 19) {
				return 16;
			}
					// B_Bi_Bi_16x8
			if (mbType == 20) {
				return 8;
			}
					// B_Bi_Bi_8x16
			if (mbType == 21) {
				return 16;
			}
					// B_8x8
			if (mbType == 22) {
				return 8;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_NumSubMbPart(bool transformSize8x8Flag, int mbType) {
					// P_L0_8x8
			if (mbType == 0) {
				return 1;
			}
					// P_L0_8x4
			if (mbType == 1) {
				return 2;
			}
					// P_L0_4x8
			if (mbType == 2) {
				return 2;
			}
					// P_L0_4x4
			if (mbType == 3) {
				return 4;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_SubMbPredMode(bool transformSize8x8Flag, int mbType) {
					// P_L0_8x8
			if (mbType == 0) {
				return Pred_L0;
			}
					// P_L0_8x4
			if (mbType == 1) {
				return Pred_L0;
			}
					// P_L0_4x8
			if (mbType == 2) {
				return Pred_L0;
			}
					// P_L0_4x4
			if (mbType == 3) {
				return Pred_L0;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_SubMbPartWidth(bool transformSize8x8Flag, int mbType) {
					// P_L0_8x8
			if (mbType == 0) {
				return 8;
			}
					// P_L0_8x4
			if (mbType == 1) {
				return 8;
			}
					// P_L0_4x8
			if (mbType == 2) {
				return 4;
			}
					// P_L0_4x4
			if (mbType == 3) {
				return 4;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubP_SubMbPartHeight(bool transformSize8x8Flag, int mbType) {
					// P_L0_8x8
			if (mbType == 0) {
				return 4;
			}
					// P_L0_8x4
			if (mbType == 1) {
				return 4;
			}
					// P_L0_4x8
			if (mbType == 2) {
				return 8;
			}
					// P_L0_4x4
			if (mbType == 3) {
				return 8;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_NumSubMbPart(bool transformSize8x8Flag, int mbType) {
					// B_Direct_8x8
			if (mbType == 0) {
				return 4;
			}
					// B_L0_8x8
			if (mbType == 1) {
				return 1;
			}
					// B_L1_8x8
			if (mbType == 2) {
				return 1;
			}
					// B_Bi_8x8
			if (mbType == 3) {
				return 1;
			}
					// B_L0_8x4
			if (mbType == 4) {
				return 2;
			}
					// B_L0_4x8
			if (mbType == 5) {
				return 2;
			}
					// B_L1_8x4
			if (mbType == 6) {
				return 2;
			}
					// B_L1_4x8
			if (mbType == 7) {
				return 2;
			}
					// B_Bi_8x4
			if (mbType == 8) {
				return 2;
			}
					// B_Bi_4x8
			if (mbType == 9) {
				return 2;
			}
					// B_L0_4x4
			if (mbType == 10) {
				return 4;
			}
					// B_L1_4x4
			if (mbType == 11) {
				return 4;
			}
					// B_Bi_4x4
			if (mbType == 12) {
				return 4;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_SubMbPredMode(bool transformSize8x8Flag, int mbType) {
					// B_Direct_8x8
			if (mbType == 0) {
				return Direct;
			}
					// B_L0_8x8
			if (mbType == 1) {
				return Pred_L0;
			}
					// B_L1_8x8
			if (mbType == 2) {
				return Pred_L1;
			}
					// B_Bi_8x8
			if (mbType == 3) {
				return BiPred;
			}
					// B_L0_8x4
			if (mbType == 4) {
				return Pred_L0;
			}
					// B_L0_4x8
			if (mbType == 5) {
				return Pred_L0;
			}
					// B_L1_8x4
			if (mbType == 6) {
				return Pred_L1;
			}
					// B_L1_4x8
			if (mbType == 7) {
				return Pred_L1;
			}
					// B_Bi_8x4
			if (mbType == 8) {
				return BiPred;
			}
					// B_Bi_4x8
			if (mbType == 9) {
				return BiPred;
			}
					// B_L0_4x4
			if (mbType == 10) {
				return Pred_L0;
			}
					// B_L1_4x4
			if (mbType == 11) {
				return Pred_L1;
			}
					// B_Bi_4x4
			if (mbType == 12) {
				return BiPred;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_SubMbPartWidth(bool transformSize8x8Flag, int mbType) {
					// B_Direct_8x8
			if (mbType == 0) {
				return 4;
			}
					// B_L0_8x8
			if (mbType == 1) {
				return 8;
			}
					// B_L1_8x8
			if (mbType == 2) {
				return 8;
			}
					// B_Bi_8x8
			if (mbType == 3) {
				return 8;
			}
					// B_L0_8x4
			if (mbType == 4) {
				return 8;
			}
					// B_L0_4x8
			if (mbType == 5) {
				return 4;
			}
					// B_L1_8x4
			if (mbType == 6) {
				return 8;
			}
					// B_L1_4x8
			if (mbType == 7) {
				return 4;
			}
					// B_Bi_8x4
			if (mbType == 8) {
				return 8;
			}
					// B_Bi_4x8
			if (mbType == 9) {
				return 4;
			}
					// B_L0_4x4
			if (mbType == 10) {
				return 4;
			}
					// B_L1_4x4
			if (mbType == 11) {
				return 4;
			}
					// B_Bi_4x4
			if (mbType == 12) {
				return 4;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}

		private static int SubB_SubMbPartHeight(bool transformSize8x8Flag, int mbType) {
					// B_Direct_8x8
			if (mbType == 0) {
				return 4;
			}
					// B_L0_8x8
			if (mbType == 1) {
				return 8;
			}
					// B_L1_8x8
			if (mbType == 2) {
				return 8;
			}
					// B_Bi_8x8
			if (mbType == 3) {
				return 8;
			}
					// B_L0_8x4
			if (mbType == 4) {
				return 4;
			}
					// B_L0_4x8
			if (mbType == 5) {
				return 8;
			}
					// B_L1_8x4
			if (mbType == 6) {
				return 4;
			}
					// B_L1_4x8
			if (mbType == 7) {
				return 8;
			}
					// B_Bi_8x4
			if (mbType == 8) {
				return 4;
			}
					// B_Bi_4x8
			if (mbType == 9) {
				return 8;
			}
					// B_L0_4x4
			if (mbType == 10) {
				return 4;
			}
					// B_L1_4x4
			if (mbType == 11) {
				return 4;
			}
					// B_Bi_4x4
			if (mbType == 12) {
				return 4;
			}
					throw new InvalidOperationException("Invalid or unrecognizable input");
		}
	}
}
