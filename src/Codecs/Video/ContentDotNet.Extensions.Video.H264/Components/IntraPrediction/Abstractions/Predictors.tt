<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace ContentDotNet.Extensions.Video.H264.Components.IntraPrediction.Abstractions
{
    using ContentDotNet.Extensions.Video.H264.Models;

    <#
        string[] intra4x4Methods = new[]
        {
            "Vertical", "Horizontal", "Dc", "DiagonalDownLeft", "DiagonalDownRight",
            "VerticalRight", "HorizontalDown", "VerticalLeft", "HorizontalUp"
        };
        string[] intra8x8Methods = intra4x4Methods;
        string[] intra16x16Methods = new[] { "Vertical", "Horizontal", "Dc", "Plane" };
        string[] intraChromaMethods = new[] { "Dc", "Horizontal", "Vertical", "Plane" };
    #>

    /// <summary>
    ///   Abstracts an intra predictor.
    /// </summary>
    public interface IIntraPredictor
    {
        /// <summary>
        ///   The H.264 state.
        /// </summary>
        H264State? H264State { get; set; }
    }

    /// <summary>
    ///   The Intra 4x4 predictor abstraction.
    /// </summary>
    public interface IIntra4x4Predictor : IIntraPredictor
    {
    <#
        foreach (string predMethod in intra4x4Methods)
        {
    #>

        /// <summary>
        ///   Applies Intra 4x4 <#= predMethod #> prediction and stores the predicted Luma pixels into <paramref name="pred4x4L" />.
        /// </summary>
        /// <param name="samples">The source intra prediction samples for use by the Intra predictor.</param>
        /// <param name="pred4x4L">The buffer where the predicted Luma values are stored. This should be a 4x4 array.</param>
        void <#= predMethod #>(IntraPredictionSamples samples, int[,] pred4x4L);
    <# } #>
    }

    /// <summary>
    ///   The Intra 8x8 predictor abstraction.
    /// </summary>
    public interface IIntra8x8Predictor : IIntraPredictor
    {
    <#
        foreach (string predMethod in intra8x8Methods)
        {
    #>

        /// <summary>
        ///   Applies Intra 8x8 <#= predMethod #> prediction and stores the predicted Luma pixels into <paramref name="pred8x8L" />.
        /// </summary>
        /// <param name="samples">The source intra prediction samples for use by the Intra predictor.</param>
        /// <param name="pred8x8L">The buffer where the predicted Luma values are stored. This should be a 8x8 array.</param>
        void <#= predMethod #>(IntraPredictionSamples samples, int[,] pred8x8L);
    <# } #>
    }

    /// <summary>
    ///   The Intra 16x16 predictor abstraction.
    /// </summary>
    public interface IIntra16x16Predictor : IIntraPredictor
    {
    <#
        foreach (string predMethod in intra16x16Methods)
        {
    #>

        /// <summary>
        ///   Applies Intra 16x16 <#= predMethod #> prediction and stores the predicted Luma pixels into <paramref name="pred16x16L" />.
        /// </summary>
        /// <param name="samples">The source intra prediction samples for use by the Intra predictor.</param>
        /// <param name="pred16x16L">The buffer where the predicted Luma values are stored. This should be a 16x16 array.</param>
        void <#= predMethod #>(IntraPredictionSamples samples, int[,] pred16x16L);
    <# } #>
    }

    /// <summary>
    ///   The Intra Chroma predictor abstraction.
    /// </summary>
    public interface IIntraChromaPredictor : IIntraPredictor
    {
        /// <summary>
        ///   Callback to retrieve the chroma channel.
        /// </summary>
        GetChromaChannelCallback GetChromaChannelCallback { get; }

    <#
        foreach (string predMethod in intraChromaMethods)
        {
    #>

        /// <summary>
        ///   Applies Intra Chroma <#= predMethod #> prediction and stores the predicted Chroma pixels into <paramref name="predC" />.
        /// </summary>
        /// <param name="samples">The source intra prediction samples for use by the Intra predictor.</param>
        /// <param name="predC">The buffer where the predicted Luma values are stored. This should be a 16x16 array.</param>
        void <#= predMethod #>(IntraPredictionSamples samples, int[,] predC);
    <# } #>
    }

    /// <summary>
    ///   The Intra PCM predictor abstraction.
    /// </summary>
    public interface IIntraPcmPredictor : IIntraPredictor
    {
        /// <summary>
        ///   Applies Intra PCM prediction and stores the predicted Intra pixels into <paramref name="sl" />, CB pixels into <paramref name="scb" />,
        ///   and CR pixels into <paramref name="scr" />.
        /// </summary>
        /// <param name="currMB">Current macroblock</param>
        /// <param name="sl">Luma buffer</param>
        /// <param name="scb">Cb buffer</param>
        /// <param name="scr">Cr buffer</param>
        void Predict(H264MacroblockInfo currMB, int[,] sl, int[,] scb, int[,] scr);
    }
}
