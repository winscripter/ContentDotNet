//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace ContentDotNet.Extensions.Video.H264.Utilities
{
	using ContentDotNet.Extensions.Video.H264.RbspModels;

	
	/// <summary>
	///   A single, centralized location to grab H.264 syntax elements very easily.
	/// </summary>
	/// <remarks>
	///   <para>The methods that prefix with <c>Fetch</c> will fetch the value and return <see langword="null" /> if it's not available.</para>
	///   <para>The methods that prefix with <c>TryFetch</c> return a boolean indicating if the element was fetched, and the actually fetched element is in an <see langword="out" /> parameter.</para>
	///   <para>The methods that prefix with <c>Get</c> will return an exception if the value is missing, and if these methods do return, they guarantee to return non-nullable values.</para>
	/// </remarks>
	public static class SyntaxElementGrabber
	{
		
		#region Derivative for profile_idc

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ProfileIdc" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ProfileIdc" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ProfileIdc" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchProfileIdc(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ProfileIdc;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ProfileIdc" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ProfileIdc" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchProfileIdc(H264RbspState? state, out uint? result)
		{
			result = FetchProfileIdc(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ProfileIdc" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ProfileIdc" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetProfileIdc(H264RbspState? state)
		{
			if (!TryFetchProfileIdc(state, out var result))
				throw new InvalidOperationException("The value ProfileIdc could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for constraint_set0_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet0Flag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet0Flag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet0Flag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchConstraintSet0Flag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ConstraintSet0Flag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet0Flag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet0Flag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchConstraintSet0Flag(H264RbspState? state, out bool? result)
		{
			result = FetchConstraintSet0Flag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet0Flag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet0Flag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetConstraintSet0Flag(H264RbspState? state)
		{
			if (!TryFetchConstraintSet0Flag(state, out var result))
				throw new InvalidOperationException("The value ConstraintSet0Flag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for constraint_set1_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet1Flag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet1Flag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet1Flag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchConstraintSet1Flag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ConstraintSet1Flag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet1Flag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet1Flag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchConstraintSet1Flag(H264RbspState? state, out bool? result)
		{
			result = FetchConstraintSet1Flag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet1Flag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet1Flag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetConstraintSet1Flag(H264RbspState? state)
		{
			if (!TryFetchConstraintSet1Flag(state, out var result))
				throw new InvalidOperationException("The value ConstraintSet1Flag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for constraint_set2_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet2Flag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet2Flag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet2Flag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchConstraintSet2Flag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ConstraintSet2Flag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet2Flag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet2Flag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchConstraintSet2Flag(H264RbspState? state, out bool? result)
		{
			result = FetchConstraintSet2Flag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet2Flag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet2Flag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetConstraintSet2Flag(H264RbspState? state)
		{
			if (!TryFetchConstraintSet2Flag(state, out var result))
				throw new InvalidOperationException("The value ConstraintSet2Flag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for constraint_set3_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet3Flag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet3Flag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet3Flag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchConstraintSet3Flag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ConstraintSet3Flag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet3Flag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet3Flag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchConstraintSet3Flag(H264RbspState? state, out bool? result)
		{
			result = FetchConstraintSet3Flag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet3Flag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet3Flag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetConstraintSet3Flag(H264RbspState? state)
		{
			if (!TryFetchConstraintSet3Flag(state, out var result))
				throw new InvalidOperationException("The value ConstraintSet3Flag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for constraint_set4_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet4Flag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet4Flag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet4Flag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchConstraintSet4Flag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ConstraintSet4Flag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet4Flag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet4Flag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchConstraintSet4Flag(H264RbspState? state, out bool? result)
		{
			result = FetchConstraintSet4Flag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet4Flag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet4Flag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetConstraintSet4Flag(H264RbspState? state)
		{
			if (!TryFetchConstraintSet4Flag(state, out var result))
				throw new InvalidOperationException("The value ConstraintSet4Flag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for constraint_set5_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet5Flag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet5Flag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet5Flag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchConstraintSet5Flag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ConstraintSet5Flag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet5Flag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet5Flag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchConstraintSet5Flag(H264RbspState? state, out bool? result)
		{
			result = FetchConstraintSet5Flag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet5Flag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ConstraintSet5Flag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetConstraintSet5Flag(H264RbspState? state)
		{
			if (!TryFetchConstraintSet5Flag(state, out var result))
				throw new InvalidOperationException("The value ConstraintSet5Flag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for reserved_zero_2bits

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ReservedZero2Bits" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ReservedZero2Bits" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ReservedZero2Bits" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchReservedZero2Bits(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ReservedZero2Bits;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ReservedZero2Bits" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ReservedZero2Bits" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchReservedZero2Bits(H264RbspState? state, out uint? result)
		{
			result = FetchReservedZero2Bits(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ReservedZero2Bits" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ReservedZero2Bits" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetReservedZero2Bits(H264RbspState? state)
		{
			if (!TryFetchReservedZero2Bits(state, out var result))
				throw new InvalidOperationException("The value ReservedZero2Bits could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for level_idc

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.LevelIdc" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.LevelIdc" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.LevelIdc" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchLevelIdc(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.LevelIdc;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.LevelIdc" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.LevelIdc" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchLevelIdc(H264RbspState? state, out uint? result)
		{
			result = FetchLevelIdc(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.LevelIdc" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.LevelIdc" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetLevelIdc(H264RbspState? state)
		{
			if (!TryFetchLevelIdc(state, out var result))
				throw new InvalidOperationException("The value LevelIdc could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for seq_parameter_set_id

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SeqParameterSetId" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SeqParameterSetId" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SeqParameterSetId" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchSeqParameterSetId(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.SeqParameterSetId;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SeqParameterSetId" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SeqParameterSetId" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSeqParameterSetId(H264RbspState? state, out uint? result)
		{
			result = FetchSeqParameterSetId(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SeqParameterSetId" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SeqParameterSetId" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetSeqParameterSetId(H264RbspState? state)
		{
			if (!TryFetchSeqParameterSetId(state, out var result))
				throw new InvalidOperationException("The value SeqParameterSetId could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for chroma_format_idc

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ChromaFormatIdc" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ChromaFormatIdc" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ChromaFormatIdc" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchChromaFormatIdc(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.ChromaFormatIdc;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ChromaFormatIdc" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ChromaFormatIdc" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchChromaFormatIdc(H264RbspState? state, out uint? result)
		{
			result = FetchChromaFormatIdc(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ChromaFormatIdc" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.ChromaFormatIdc" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetChromaFormatIdc(H264RbspState? state)
		{
			if (!TryFetchChromaFormatIdc(state, out var result))
				throw new InvalidOperationException("The value ChromaFormatIdc could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for separate_colour_plane_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeparateColourPlaneFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeparateColourPlaneFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeparateColourPlaneFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchSeparateColourPlaneFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.SeparateColourPlaneFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeparateColourPlaneFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeparateColourPlaneFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSeparateColourPlaneFlag(H264RbspState? state, out bool? result)
		{
			result = FetchSeparateColourPlaneFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeparateColourPlaneFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeparateColourPlaneFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetSeparateColourPlaneFlag(H264RbspState? state)
		{
			if (!TryFetchSeparateColourPlaneFlag(state, out var result))
				throw new InvalidOperationException("The value SeparateColourPlaneFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for bit_depth_luma_minus8

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthLumaMinus8" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthLumaMinus8" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthLumaMinus8" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchBitDepthLumaMinus8(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.BitDepthLumaMinus8;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthLumaMinus8" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthLumaMinus8" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchBitDepthLumaMinus8(H264RbspState? state, out uint? result)
		{
			result = FetchBitDepthLumaMinus8(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthLumaMinus8" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthLumaMinus8" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetBitDepthLumaMinus8(H264RbspState? state)
		{
			if (!TryFetchBitDepthLumaMinus8(state, out var result))
				throw new InvalidOperationException("The value BitDepthLumaMinus8 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for bit_depth_chroma_minus8

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthChromaMinus8" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthChromaMinus8" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthChromaMinus8" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchBitDepthChromaMinus8(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.BitDepthChromaMinus8;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthChromaMinus8" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthChromaMinus8" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchBitDepthChromaMinus8(H264RbspState? state, out uint? result)
		{
			result = FetchBitDepthChromaMinus8(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthChromaMinus8" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.BitDepthChromaMinus8" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetBitDepthChromaMinus8(H264RbspState? state)
		{
			if (!TryFetchBitDepthChromaMinus8(state, out var result))
				throw new InvalidOperationException("The value BitDepthChromaMinus8 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for qpprime_y_zero_transform_bypass_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.QpprimeYZeroTransformBypassFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.QpprimeYZeroTransformBypassFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.QpprimeYZeroTransformBypassFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchQpprimeYZeroTransformBypassFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.QpprimeYZeroTransformBypassFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.QpprimeYZeroTransformBypassFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.QpprimeYZeroTransformBypassFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchQpprimeYZeroTransformBypassFlag(H264RbspState? state, out bool? result)
		{
			result = FetchQpprimeYZeroTransformBypassFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.QpprimeYZeroTransformBypassFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.QpprimeYZeroTransformBypassFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetQpprimeYZeroTransformBypassFlag(H264RbspState? state)
		{
			if (!TryFetchQpprimeYZeroTransformBypassFlag(state, out var result))
				throw new InvalidOperationException("The value QpprimeYZeroTransformBypassFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for seq_scaling_matrix_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingMatrixPresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingMatrixPresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingMatrixPresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchSeqScalingMatrixPresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.SeqScalingMatrixPresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingMatrixPresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingMatrixPresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSeqScalingMatrixPresentFlag(H264RbspState? state, out bool? result)
		{
			result = FetchSeqScalingMatrixPresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingMatrixPresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingMatrixPresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetSeqScalingMatrixPresentFlag(H264RbspState? state)
		{
			if (!TryFetchSeqScalingMatrixPresentFlag(state, out var result))
				throw new InvalidOperationException("The value SeqScalingMatrixPresentFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for seq_scaling_list_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingListPresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingListPresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingListPresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool[]? FetchSeqScalingListPresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.SeqScalingListPresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingListPresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingListPresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSeqScalingListPresentFlag(H264RbspState? state, out bool[]? result)
		{
			result = FetchSeqScalingListPresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingListPresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.SeqScalingListPresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool[] GetSeqScalingListPresentFlag(H264RbspState? state)
		{
			if (!TryFetchSeqScalingListPresentFlag(state, out var result))
				throw new InvalidOperationException("The value SeqScalingListPresentFlag could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for log2_max_frame_num_minus4

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxFrameNumMinus4" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxFrameNumMinus4" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxFrameNumMinus4" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchLog2MaxFrameNumMinus4(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.Log2MaxFrameNumMinus4;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxFrameNumMinus4" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxFrameNumMinus4" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchLog2MaxFrameNumMinus4(H264RbspState? state, out uint? result)
		{
			result = FetchLog2MaxFrameNumMinus4(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxFrameNumMinus4" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxFrameNumMinus4" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetLog2MaxFrameNumMinus4(H264RbspState? state)
		{
			if (!TryFetchLog2MaxFrameNumMinus4(state, out var result))
				throw new InvalidOperationException("The value Log2MaxFrameNumMinus4 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_order_cnt_type

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicOrderCntType" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicOrderCntType" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicOrderCntType" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchPicOrderCntType(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.PicOrderCntType;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicOrderCntType" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicOrderCntType" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicOrderCntType(H264RbspState? state, out uint? result)
		{
			result = FetchPicOrderCntType(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicOrderCntType" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicOrderCntType" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetPicOrderCntType(H264RbspState? state)
		{
			if (!TryFetchPicOrderCntType(state, out var result))
				throw new InvalidOperationException("The value PicOrderCntType could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for log2_max_pic_order_cnt_lsb_minus4

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchLog2MaxPicOrderCntLsbMinus4(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchLog2MaxPicOrderCntLsbMinus4(H264RbspState? state, out uint? result)
		{
			result = FetchLog2MaxPicOrderCntLsbMinus4(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Log2MaxPicOrderCntLsbMinus4" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetLog2MaxPicOrderCntLsbMinus4(H264RbspState? state)
		{
			if (!TryFetchLog2MaxPicOrderCntLsbMinus4(state, out var result))
				throw new InvalidOperationException("The value Log2MaxPicOrderCntLsbMinus4 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for delta_pic_order_always_zero_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchDeltaPicOrderAlwaysZeroFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDeltaPicOrderAlwaysZeroFlag(H264RbspState? state, out bool? result)
		{
			result = FetchDeltaPicOrderAlwaysZeroFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.DeltaPicOrderAlwaysZeroFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetDeltaPicOrderAlwaysZeroFlag(H264RbspState? state)
		{
			if (!TryFetchDeltaPicOrderAlwaysZeroFlag(state, out var result))
				throw new InvalidOperationException("The value DeltaPicOrderAlwaysZeroFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for offset_for_non_ref_pic

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForNonRefPic" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForNonRefPic" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForNonRefPic" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchOffsetForNonRefPic(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.OffsetForNonRefPic;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForNonRefPic" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForNonRefPic" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchOffsetForNonRefPic(H264RbspState? state, out int? result)
		{
			result = FetchOffsetForNonRefPic(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForNonRefPic" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForNonRefPic" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetOffsetForNonRefPic(H264RbspState? state)
		{
			if (!TryFetchOffsetForNonRefPic(state, out var result))
				throw new InvalidOperationException("The value OffsetForNonRefPic could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for offset_for_top_to_bottom_field

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForTopToBottomField" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForTopToBottomField" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForTopToBottomField" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchOffsetForTopToBottomField(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.OffsetForTopToBottomField;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForTopToBottomField" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForTopToBottomField" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchOffsetForTopToBottomField(H264RbspState? state, out int? result)
		{
			result = FetchOffsetForTopToBottomField(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForTopToBottomField" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForTopToBottomField" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetOffsetForTopToBottomField(H264RbspState? state)
		{
			if (!TryFetchOffsetForTopToBottomField(state, out var result))
				throw new InvalidOperationException("The value OffsetForTopToBottomField could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for num_ref_frames_in_pic_order_cnt_cycle

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.NumRefFramesInPicOrderCntCycle" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.NumRefFramesInPicOrderCntCycle" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.NumRefFramesInPicOrderCntCycle" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchNumRefFramesInPicOrderCntCycle(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.NumRefFramesInPicOrderCntCycle;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.NumRefFramesInPicOrderCntCycle" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.NumRefFramesInPicOrderCntCycle" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNumRefFramesInPicOrderCntCycle(H264RbspState? state, out uint? result)
		{
			result = FetchNumRefFramesInPicOrderCntCycle(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.NumRefFramesInPicOrderCntCycle" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.NumRefFramesInPicOrderCntCycle" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetNumRefFramesInPicOrderCntCycle(H264RbspState? state)
		{
			if (!TryFetchNumRefFramesInPicOrderCntCycle(state, out var result))
				throw new InvalidOperationException("The value NumRefFramesInPicOrderCntCycle could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for offset_for_ref_frame

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForRefFrame" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForRefFrame" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForRefFrame" />, or <see langword="null" /> if unavailable.</returns>
		public static int[]? FetchOffsetForRefFrame(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.OffsetForRefFrame;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForRefFrame" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForRefFrame" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchOffsetForRefFrame(H264RbspState? state, out int[]? result)
		{
			result = FetchOffsetForRefFrame(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForRefFrame" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.OffsetForRefFrame" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int[] GetOffsetForRefFrame(H264RbspState? state)
		{
			if (!TryFetchOffsetForRefFrame(state, out var result))
				throw new InvalidOperationException("The value OffsetForRefFrame could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for max_num_ref_frames

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MaxNumRefFrames" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MaxNumRefFrames" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MaxNumRefFrames" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchMaxNumRefFrames(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.MaxNumRefFrames;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MaxNumRefFrames" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MaxNumRefFrames" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchMaxNumRefFrames(H264RbspState? state, out uint? result)
		{
			result = FetchMaxNumRefFrames(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MaxNumRefFrames" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MaxNumRefFrames" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetMaxNumRefFrames(H264RbspState? state)
		{
			if (!TryFetchMaxNumRefFrames(state, out var result))
				throw new InvalidOperationException("The value MaxNumRefFrames could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for gaps_in_frame_num_value_allowed_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.GapsInFrameNumValueAllowedFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.GapsInFrameNumValueAllowedFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.GapsInFrameNumValueAllowedFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchGapsInFrameNumValueAllowedFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.GapsInFrameNumValueAllowedFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.GapsInFrameNumValueAllowedFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.GapsInFrameNumValueAllowedFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchGapsInFrameNumValueAllowedFlag(H264RbspState? state, out bool? result)
		{
			result = FetchGapsInFrameNumValueAllowedFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.GapsInFrameNumValueAllowedFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.GapsInFrameNumValueAllowedFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetGapsInFrameNumValueAllowedFlag(H264RbspState? state)
		{
			if (!TryFetchGapsInFrameNumValueAllowedFlag(state, out var result))
				throw new InvalidOperationException("The value GapsInFrameNumValueAllowedFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_width_in_mbs_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicWidthInMbsMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicWidthInMbsMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicWidthInMbsMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchPicWidthInMbsMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.PicWidthInMbsMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicWidthInMbsMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicWidthInMbsMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicWidthInMbsMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchPicWidthInMbsMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicWidthInMbsMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicWidthInMbsMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetPicWidthInMbsMinus1(H264RbspState? state)
		{
			if (!TryFetchPicWidthInMbsMinus1(state, out var result))
				throw new InvalidOperationException("The value PicWidthInMbsMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_height_in_map_units_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicHeightInMapUnitsMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicHeightInMapUnitsMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicHeightInMapUnitsMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchPicHeightInMapUnitsMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.PicHeightInMapUnitsMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicHeightInMapUnitsMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicHeightInMapUnitsMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicHeightInMapUnitsMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchPicHeightInMapUnitsMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicHeightInMapUnitsMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.PicHeightInMapUnitsMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetPicHeightInMapUnitsMinus1(H264RbspState? state)
		{
			if (!TryFetchPicHeightInMapUnitsMinus1(state, out var result))
				throw new InvalidOperationException("The value PicHeightInMapUnitsMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for frame_mbs_only_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameMbsOnlyFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameMbsOnlyFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameMbsOnlyFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchFrameMbsOnlyFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.FrameMbsOnlyFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameMbsOnlyFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameMbsOnlyFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFrameMbsOnlyFlag(H264RbspState? state, out bool? result)
		{
			result = FetchFrameMbsOnlyFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameMbsOnlyFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameMbsOnlyFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetFrameMbsOnlyFlag(H264RbspState? state)
		{
			if (!TryFetchFrameMbsOnlyFlag(state, out var result))
				throw new InvalidOperationException("The value FrameMbsOnlyFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for mb_adaptive_frame_field_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MbAdaptiveFrameFieldFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MbAdaptiveFrameFieldFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MbAdaptiveFrameFieldFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchMbAdaptiveFrameFieldFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.MbAdaptiveFrameFieldFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MbAdaptiveFrameFieldFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MbAdaptiveFrameFieldFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchMbAdaptiveFrameFieldFlag(H264RbspState? state, out bool? result)
		{
			result = FetchMbAdaptiveFrameFieldFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MbAdaptiveFrameFieldFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.MbAdaptiveFrameFieldFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetMbAdaptiveFrameFieldFlag(H264RbspState? state)
		{
			if (!TryFetchMbAdaptiveFrameFieldFlag(state, out var result))
				throw new InvalidOperationException("The value MbAdaptiveFrameFieldFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for direct_8x8_inference_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Direct8x8InferenceFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Direct8x8InferenceFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Direct8x8InferenceFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchDirect8x8InferenceFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.Direct8x8InferenceFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Direct8x8InferenceFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Direct8x8InferenceFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDirect8x8InferenceFlag(H264RbspState? state, out bool? result)
		{
			result = FetchDirect8x8InferenceFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Direct8x8InferenceFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.Direct8x8InferenceFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetDirect8x8InferenceFlag(H264RbspState? state)
		{
			if (!TryFetchDirect8x8InferenceFlag(state, out var result))
				throw new InvalidOperationException("The value Direct8x8InferenceFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for frame_cropping_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCroppingFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCroppingFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCroppingFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchFrameCroppingFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.FrameCroppingFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCroppingFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCroppingFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFrameCroppingFlag(H264RbspState? state, out bool? result)
		{
			result = FetchFrameCroppingFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCroppingFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCroppingFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetFrameCroppingFlag(H264RbspState? state)
		{
			if (!TryFetchFrameCroppingFlag(state, out var result))
				throw new InvalidOperationException("The value FrameCroppingFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for frame_crop_left_offset

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropLeftOffset" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropLeftOffset" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropLeftOffset" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchFrameCropLeftOffset(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.FrameCropLeftOffset;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropLeftOffset" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropLeftOffset" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFrameCropLeftOffset(H264RbspState? state, out uint? result)
		{
			result = FetchFrameCropLeftOffset(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropLeftOffset" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropLeftOffset" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetFrameCropLeftOffset(H264RbspState? state)
		{
			if (!TryFetchFrameCropLeftOffset(state, out var result))
				throw new InvalidOperationException("The value FrameCropLeftOffset could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for frame_crop_right_offset

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropRightOffset" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropRightOffset" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropRightOffset" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchFrameCropRightOffset(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.FrameCropRightOffset;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropRightOffset" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropRightOffset" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFrameCropRightOffset(H264RbspState? state, out uint? result)
		{
			result = FetchFrameCropRightOffset(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropRightOffset" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropRightOffset" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetFrameCropRightOffset(H264RbspState? state)
		{
			if (!TryFetchFrameCropRightOffset(state, out var result))
				throw new InvalidOperationException("The value FrameCropRightOffset could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for frame_crop_top_offset

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropTopOffset" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropTopOffset" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropTopOffset" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchFrameCropTopOffset(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.FrameCropTopOffset;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropTopOffset" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropTopOffset" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFrameCropTopOffset(H264RbspState? state, out uint? result)
		{
			result = FetchFrameCropTopOffset(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropTopOffset" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropTopOffset" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetFrameCropTopOffset(H264RbspState? state)
		{
			if (!TryFetchFrameCropTopOffset(state, out var result))
				throw new InvalidOperationException("The value FrameCropTopOffset could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for frame_crop_bottom_offset

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropBottomOffset" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropBottomOffset" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropBottomOffset" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchFrameCropBottomOffset(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.FrameCropBottomOffset;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropBottomOffset" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropBottomOffset" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFrameCropBottomOffset(H264RbspState? state, out uint? result)
		{
			result = FetchFrameCropBottomOffset(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropBottomOffset" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.FrameCropBottomOffset" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetFrameCropBottomOffset(H264RbspState? state)
		{
			if (!TryFetchFrameCropBottomOffset(state, out var result))
				throw new InvalidOperationException("The value FrameCropBottomOffset could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for vui_parameters_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.VuiParametersPresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SequenceParameterSetData" />, or
		///   <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.VuiParametersPresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.VuiParametersPresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchVuiParametersPresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SequenceParameterSetData is null) return null;
			var value = state.SequenceParameterSetData.VuiParametersPresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.VuiParametersPresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.VuiParametersPresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchVuiParametersPresentFlag(H264RbspState? state, out bool? result)
		{
			result = FetchVuiParametersPresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.VuiParametersPresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SequenceParameterSetData" />, and from there, <see cref="RbspSequenceParameterSetData.VuiParametersPresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetVuiParametersPresentFlag(H264RbspState? state)
		{
			if (!TryFetchVuiParametersPresentFlag(state, out var result))
				throw new InvalidOperationException("The value VuiParametersPresentFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_parameter_set_id

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicParameterSetId" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicParameterSetId" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicParameterSetId" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchPicParameterSetId(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.PicParameterSetId;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicParameterSetId" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicParameterSetId" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicParameterSetId(H264RbspState? state, out uint? result)
		{
			result = FetchPicParameterSetId(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicParameterSetId" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicParameterSetId" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetPicParameterSetId(H264RbspState? state)
		{
			if (!TryFetchPicParameterSetId(state, out var result))
				throw new InvalidOperationException("The value PicParameterSetId could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for entropy_coding_mode_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.EntropyCodingModeFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.EntropyCodingModeFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.EntropyCodingModeFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchEntropyCodingModeFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.EntropyCodingModeFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.EntropyCodingModeFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.EntropyCodingModeFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchEntropyCodingModeFlag(H264RbspState? state, out bool? result)
		{
			result = FetchEntropyCodingModeFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.EntropyCodingModeFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.EntropyCodingModeFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetEntropyCodingModeFlag(H264RbspState? state)
		{
			if (!TryFetchEntropyCodingModeFlag(state, out var result))
				throw new InvalidOperationException("The value EntropyCodingModeFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for bottom_field_pic_order_in_frame_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomFieldPicOrderInFramePresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomFieldPicOrderInFramePresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomFieldPicOrderInFramePresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchBottomFieldPicOrderInFramePresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.BottomFieldPicOrderInFramePresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomFieldPicOrderInFramePresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomFieldPicOrderInFramePresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchBottomFieldPicOrderInFramePresentFlag(H264RbspState? state, out bool? result)
		{
			result = FetchBottomFieldPicOrderInFramePresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomFieldPicOrderInFramePresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomFieldPicOrderInFramePresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetBottomFieldPicOrderInFramePresentFlag(H264RbspState? state)
		{
			if (!TryFetchBottomFieldPicOrderInFramePresentFlag(state, out var result))
				throw new InvalidOperationException("The value BottomFieldPicOrderInFramePresentFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for num_slice_groups_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumSliceGroupsMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumSliceGroupsMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumSliceGroupsMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchNumSliceGroupsMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.NumSliceGroupsMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumSliceGroupsMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumSliceGroupsMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNumSliceGroupsMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchNumSliceGroupsMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumSliceGroupsMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumSliceGroupsMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetNumSliceGroupsMinus1(H264RbspState? state)
		{
			if (!TryFetchNumSliceGroupsMinus1(state, out var result))
				throw new InvalidOperationException("The value NumSliceGroupsMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_group_map_type

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupMapType" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupMapType" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupMapType" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchSliceGroupMapType(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.SliceGroupMapType;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupMapType" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupMapType" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceGroupMapType(H264RbspState? state, out uint? result)
		{
			result = FetchSliceGroupMapType(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupMapType" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupMapType" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetSliceGroupMapType(H264RbspState? state)
		{
			if (!TryFetchSliceGroupMapType(state, out var result))
				throw new InvalidOperationException("The value SliceGroupMapType could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for run_length_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RunLengthMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RunLengthMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RunLengthMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint[]? FetchRunLengthMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.RunLengthMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RunLengthMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RunLengthMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchRunLengthMinus1(H264RbspState? state, out uint[]? result)
		{
			result = FetchRunLengthMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RunLengthMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RunLengthMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint[] GetRunLengthMinus1(H264RbspState? state)
		{
			if (!TryFetchRunLengthMinus1(state, out var result))
				throw new InvalidOperationException("The value RunLengthMinus1 could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for top_left

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.TopLeft" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.TopLeft" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.TopLeft" />, or <see langword="null" /> if unavailable.</returns>
		public static uint[]? FetchTopLeft(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.TopLeft;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.TopLeft" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.TopLeft" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchTopLeft(H264RbspState? state, out uint[]? result)
		{
			result = FetchTopLeft(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.TopLeft" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.TopLeft" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint[] GetTopLeft(H264RbspState? state)
		{
			if (!TryFetchTopLeft(state, out var result))
				throw new InvalidOperationException("The value TopLeft could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for bottom_right

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomRight" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomRight" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomRight" />, or <see langword="null" /> if unavailable.</returns>
		public static uint[]? FetchBottomRight(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.BottomRight;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomRight" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomRight" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchBottomRight(H264RbspState? state, out uint[]? result)
		{
			result = FetchBottomRight(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomRight" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.BottomRight" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint[] GetBottomRight(H264RbspState? state)
		{
			if (!TryFetchBottomRight(state, out var result))
				throw new InvalidOperationException("The value BottomRight could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for slice_group_change_direction_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeDirectionFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeDirectionFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeDirectionFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchSliceGroupChangeDirectionFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.SliceGroupChangeDirectionFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeDirectionFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeDirectionFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceGroupChangeDirectionFlag(H264RbspState? state, out bool? result)
		{
			result = FetchSliceGroupChangeDirectionFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeDirectionFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeDirectionFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetSliceGroupChangeDirectionFlag(H264RbspState? state)
		{
			if (!TryFetchSliceGroupChangeDirectionFlag(state, out var result))
				throw new InvalidOperationException("The value SliceGroupChangeDirectionFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_group_change_rate_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeRateMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeRateMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeRateMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchSliceGroupChangeRateMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.SliceGroupChangeRateMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeRateMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeRateMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceGroupChangeRateMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchSliceGroupChangeRateMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeRateMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupChangeRateMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetSliceGroupChangeRateMinus1(H264RbspState? state)
		{
			if (!TryFetchSliceGroupChangeRateMinus1(state, out var result))
				throw new InvalidOperationException("The value SliceGroupChangeRateMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_size_in_map_units_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicSizeInMapUnitsMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicSizeInMapUnitsMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicSizeInMapUnitsMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchPicSizeInMapUnitsMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.PicSizeInMapUnitsMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicSizeInMapUnitsMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicSizeInMapUnitsMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicSizeInMapUnitsMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchPicSizeInMapUnitsMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicSizeInMapUnitsMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicSizeInMapUnitsMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetPicSizeInMapUnitsMinus1(H264RbspState? state)
		{
			if (!TryFetchPicSizeInMapUnitsMinus1(state, out var result))
				throw new InvalidOperationException("The value PicSizeInMapUnitsMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_group_id

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupId" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupId" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupId" />, or <see langword="null" /> if unavailable.</returns>
		public static uint[]? FetchSliceGroupId(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.SliceGroupId;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupId" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupId" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceGroupId(H264RbspState? state, out uint[]? result)
		{
			result = FetchSliceGroupId(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupId" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SliceGroupId" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint[] GetSliceGroupId(H264RbspState? state)
		{
			if (!TryFetchSliceGroupId(state, out var result))
				throw new InvalidOperationException("The value SliceGroupId could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for num_ref_idx_l0_default_active_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL0DefaultActiveMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL0DefaultActiveMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL0DefaultActiveMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchNumRefIdxL0DefaultActiveMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.NumRefIdxL0DefaultActiveMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL0DefaultActiveMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL0DefaultActiveMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNumRefIdxL0DefaultActiveMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchNumRefIdxL0DefaultActiveMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL0DefaultActiveMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL0DefaultActiveMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetNumRefIdxL0DefaultActiveMinus1(H264RbspState? state)
		{
			if (!TryFetchNumRefIdxL0DefaultActiveMinus1(state, out var result))
				throw new InvalidOperationException("The value NumRefIdxL0DefaultActiveMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for num_ref_idx_l1_default_active_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL1DefaultActiveMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL1DefaultActiveMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL1DefaultActiveMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchNumRefIdxL1DefaultActiveMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.NumRefIdxL1DefaultActiveMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL1DefaultActiveMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL1DefaultActiveMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNumRefIdxL1DefaultActiveMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchNumRefIdxL1DefaultActiveMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL1DefaultActiveMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.NumRefIdxL1DefaultActiveMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetNumRefIdxL1DefaultActiveMinus1(H264RbspState? state)
		{
			if (!TryFetchNumRefIdxL1DefaultActiveMinus1(state, out var result))
				throw new InvalidOperationException("The value NumRefIdxL1DefaultActiveMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for weighted_pred_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedPredFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedPredFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedPredFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchWeightedPredFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.WeightedPredFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedPredFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedPredFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchWeightedPredFlag(H264RbspState? state, out bool? result)
		{
			result = FetchWeightedPredFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedPredFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedPredFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetWeightedPredFlag(H264RbspState? state)
		{
			if (!TryFetchWeightedPredFlag(state, out var result))
				throw new InvalidOperationException("The value WeightedPredFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for weighted_bipred_idc

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedBiPredIdc" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedBiPredIdc" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedBiPredIdc" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchWeightedBiPredIdc(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.WeightedBiPredIdc;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedBiPredIdc" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedBiPredIdc" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchWeightedBiPredIdc(H264RbspState? state, out uint? result)
		{
			result = FetchWeightedBiPredIdc(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedBiPredIdc" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.WeightedBiPredIdc" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetWeightedBiPredIdc(H264RbspState? state)
		{
			if (!TryFetchWeightedBiPredIdc(state, out var result))
				throw new InvalidOperationException("The value WeightedBiPredIdc could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_init_qp_minus26

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQpMinus26" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQpMinus26" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQpMinus26" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchPicInitQpMinus26(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.PicInitQpMinus26;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQpMinus26" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQpMinus26" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicInitQpMinus26(H264RbspState? state, out int? result)
		{
			result = FetchPicInitQpMinus26(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQpMinus26" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQpMinus26" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetPicInitQpMinus26(H264RbspState? state)
		{
			if (!TryFetchPicInitQpMinus26(state, out var result))
				throw new InvalidOperationException("The value PicInitQpMinus26 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_init_qs_minus26

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQsMinus26" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQsMinus26" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQsMinus26" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchPicInitQsMinus26(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.PicInitQsMinus26;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQsMinus26" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQsMinus26" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicInitQsMinus26(H264RbspState? state, out int? result)
		{
			result = FetchPicInitQsMinus26(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQsMinus26" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicInitQsMinus26" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetPicInitQsMinus26(H264RbspState? state)
		{
			if (!TryFetchPicInitQsMinus26(state, out var result))
				throw new InvalidOperationException("The value PicInitQsMinus26 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for chroma_qp_index_offset

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ChromaQpIndexOffset" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ChromaQpIndexOffset" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ChromaQpIndexOffset" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchChromaQpIndexOffset(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.ChromaQpIndexOffset;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ChromaQpIndexOffset" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ChromaQpIndexOffset" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchChromaQpIndexOffset(H264RbspState? state, out int? result)
		{
			result = FetchChromaQpIndexOffset(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ChromaQpIndexOffset" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ChromaQpIndexOffset" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetChromaQpIndexOffset(H264RbspState? state)
		{
			if (!TryFetchChromaQpIndexOffset(state, out var result))
				throw new InvalidOperationException("The value ChromaQpIndexOffset could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for deblocking_filter_control_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.DeblockingFilterControlPresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.DeblockingFilterControlPresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.DeblockingFilterControlPresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchDeblockingFilterControlPresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.DeblockingFilterControlPresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.DeblockingFilterControlPresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.DeblockingFilterControlPresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDeblockingFilterControlPresentFlag(H264RbspState? state, out bool? result)
		{
			result = FetchDeblockingFilterControlPresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.DeblockingFilterControlPresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.DeblockingFilterControlPresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetDeblockingFilterControlPresentFlag(H264RbspState? state)
		{
			if (!TryFetchDeblockingFilterControlPresentFlag(state, out var result))
				throw new InvalidOperationException("The value DeblockingFilterControlPresentFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for constrained_intra_pred_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ConstrainedIntraPredFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ConstrainedIntraPredFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ConstrainedIntraPredFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchConstrainedIntraPredFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.ConstrainedIntraPredFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ConstrainedIntraPredFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ConstrainedIntraPredFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchConstrainedIntraPredFlag(H264RbspState? state, out bool? result)
		{
			result = FetchConstrainedIntraPredFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ConstrainedIntraPredFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.ConstrainedIntraPredFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetConstrainedIntraPredFlag(H264RbspState? state)
		{
			if (!TryFetchConstrainedIntraPredFlag(state, out var result))
				throw new InvalidOperationException("The value ConstrainedIntraPredFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for redundant_pic_cnt_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RedundantPicCntPresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RedundantPicCntPresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RedundantPicCntPresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchRedundantPicCntPresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.RedundantPicCntPresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RedundantPicCntPresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RedundantPicCntPresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchRedundantPicCntPresentFlag(H264RbspState? state, out bool? result)
		{
			result = FetchRedundantPicCntPresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RedundantPicCntPresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.RedundantPicCntPresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetRedundantPicCntPresentFlag(H264RbspState? state)
		{
			if (!TryFetchRedundantPicCntPresentFlag(state, out var result))
				throw new InvalidOperationException("The value RedundantPicCntPresentFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for transform_8x8_mode_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.Transform8x8ModeFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.Transform8x8ModeFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.Transform8x8ModeFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchTransform8x8ModeFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.Transform8x8ModeFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.Transform8x8ModeFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.Transform8x8ModeFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchTransform8x8ModeFlag(H264RbspState? state, out bool? result)
		{
			result = FetchTransform8x8ModeFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.Transform8x8ModeFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.Transform8x8ModeFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetTransform8x8ModeFlag(H264RbspState? state)
		{
			if (!TryFetchTransform8x8ModeFlag(state, out var result))
				throw new InvalidOperationException("The value Transform8x8ModeFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_scaling_matrix_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingMatrixPresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingMatrixPresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingMatrixPresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchPicScalingMatrixPresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.PicScalingMatrixPresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingMatrixPresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingMatrixPresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicScalingMatrixPresentFlag(H264RbspState? state, out bool? result)
		{
			result = FetchPicScalingMatrixPresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingMatrixPresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingMatrixPresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetPicScalingMatrixPresentFlag(H264RbspState? state)
		{
			if (!TryFetchPicScalingMatrixPresentFlag(state, out var result))
				throw new InvalidOperationException("The value PicScalingMatrixPresentFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_scaling_list_present_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingListPresentFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingListPresentFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingListPresentFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool[]? FetchPicScalingListPresentFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.PicScalingListPresentFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingListPresentFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingListPresentFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicScalingListPresentFlag(H264RbspState? state, out bool[]? result)
		{
			result = FetchPicScalingListPresentFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingListPresentFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.PicScalingListPresentFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool[] GetPicScalingListPresentFlag(H264RbspState? state)
		{
			if (!TryFetchPicScalingListPresentFlag(state, out var result))
				throw new InvalidOperationException("The value PicScalingListPresentFlag could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for second_chroma_qp_index_offset

		/// <summary>
		///   Retrieves <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SecondChromaQpIndexOffset" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.PictureParameterSet" />, or
		///   <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SecondChromaQpIndexOffset" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SecondChromaQpIndexOffset" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchSecondChromaQpIndexOffset(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.PictureParameterSet is null) return null;
			var value = state.PictureParameterSet.SecondChromaQpIndexOffset;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SecondChromaQpIndexOffset" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SecondChromaQpIndexOffset" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSecondChromaQpIndexOffset(H264RbspState? state, out int? result)
		{
			result = FetchSecondChromaQpIndexOffset(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SecondChromaQpIndexOffset" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.PictureParameterSet" />, and from there, <see cref="RbspPictureParameterSet.SecondChromaQpIndexOffset" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetSecondChromaQpIndexOffset(H264RbspState? state)
		{
			if (!TryFetchSecondChromaQpIndexOffset(state, out var result))
				throw new InvalidOperationException("The value SecondChromaQpIndexOffset could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for first_mb_in_slice

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FirstMbInSlice" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FirstMbInSlice" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FirstMbInSlice" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchFirstMbInSlice(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.FirstMbInSlice;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FirstMbInSlice" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FirstMbInSlice" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFirstMbInSlice(H264RbspState? state, out uint? result)
		{
			result = FetchFirstMbInSlice(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FirstMbInSlice" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FirstMbInSlice" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetFirstMbInSlice(H264RbspState? state)
		{
			if (!TryFetchFirstMbInSlice(state, out var result))
				throw new InvalidOperationException("The value FirstMbInSlice could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_type

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceType" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceType" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceType" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchSliceType(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.SliceType;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceType" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceType" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceType(H264RbspState? state, out uint? result)
		{
			result = FetchSliceType(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceType" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceType" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetSliceType(H264RbspState? state)
		{
			if (!TryFetchSliceType(state, out var result))
				throw new InvalidOperationException("The value SliceType could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for colour_plane_id

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.ColourPlaneId" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.ColourPlaneId" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.ColourPlaneId" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchColourPlaneId(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.ColourPlaneId;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.ColourPlaneId" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.ColourPlaneId" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchColourPlaneId(H264RbspState? state, out uint? result)
		{
			result = FetchColourPlaneId(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.ColourPlaneId" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.ColourPlaneId" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetColourPlaneId(H264RbspState? state)
		{
			if (!TryFetchColourPlaneId(state, out var result))
				throw new InvalidOperationException("The value ColourPlaneId could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for frame_num

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FrameNum" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FrameNum" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FrameNum" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchFrameNum(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.FrameNum;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FrameNum" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FrameNum" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFrameNum(H264RbspState? state, out uint? result)
		{
			result = FetchFrameNum(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FrameNum" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FrameNum" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetFrameNum(H264RbspState? state)
		{
			if (!TryFetchFrameNum(state, out var result))
				throw new InvalidOperationException("The value FrameNum could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for field_pic_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FieldPicFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FieldPicFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FieldPicFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchFieldPicFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.FieldPicFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FieldPicFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FieldPicFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchFieldPicFlag(H264RbspState? state, out bool? result)
		{
			result = FetchFieldPicFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FieldPicFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.FieldPicFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetFieldPicFlag(H264RbspState? state)
		{
			if (!TryFetchFieldPicFlag(state, out var result))
				throw new InvalidOperationException("The value FieldPicFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for bottom_field_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.BottomFieldFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.BottomFieldFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.BottomFieldFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchBottomFieldFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.BottomFieldFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.BottomFieldFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.BottomFieldFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchBottomFieldFlag(H264RbspState? state, out bool? result)
		{
			result = FetchBottomFieldFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.BottomFieldFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.BottomFieldFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetBottomFieldFlag(H264RbspState? state)
		{
			if (!TryFetchBottomFieldFlag(state, out var result))
				throw new InvalidOperationException("The value BottomFieldFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for idr_pic_id

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.IdrPicId" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.IdrPicId" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.IdrPicId" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchIdrPicId(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.IdrPicId;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.IdrPicId" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.IdrPicId" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchIdrPicId(H264RbspState? state, out uint? result)
		{
			result = FetchIdrPicId(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.IdrPicId" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.IdrPicId" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetIdrPicId(H264RbspState? state)
		{
			if (!TryFetchIdrPicId(state, out var result))
				throw new InvalidOperationException("The value IdrPicId could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for pic_order_cnt_lsb

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicOrderCntLsb" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicOrderCntLsb" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicOrderCntLsb" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchPicOrderCntLsb(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.PicOrderCntLsb;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicOrderCntLsb" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicOrderCntLsb" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchPicOrderCntLsb(H264RbspState? state, out uint? result)
		{
			result = FetchPicOrderCntLsb(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicOrderCntLsb" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.PicOrderCntLsb" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetPicOrderCntLsb(H264RbspState? state)
		{
			if (!TryFetchPicOrderCntLsb(state, out var result))
				throw new InvalidOperationException("The value PicOrderCntLsb could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for delta_pic_order_cnt_bottom

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCntBottom" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCntBottom" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCntBottom" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchDeltaPicOrderCntBottom(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.DeltaPicOrderCntBottom;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCntBottom" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCntBottom" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDeltaPicOrderCntBottom(H264RbspState? state, out int? result)
		{
			result = FetchDeltaPicOrderCntBottom(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCntBottom" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCntBottom" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetDeltaPicOrderCntBottom(H264RbspState? state)
		{
			if (!TryFetchDeltaPicOrderCntBottom(state, out var result))
				throw new InvalidOperationException("The value DeltaPicOrderCntBottom could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for delta_pic_order_cnt

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCnt" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCnt" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCnt" />, or <see langword="null" /> if unavailable.</returns>
		public static int[]? FetchDeltaPicOrderCnt(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.DeltaPicOrderCnt;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCnt" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCnt" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDeltaPicOrderCnt(H264RbspState? state, out int[]? result)
		{
			result = FetchDeltaPicOrderCnt(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCnt" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DeltaPicOrderCnt" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int[] GetDeltaPicOrderCnt(H264RbspState? state)
		{
			if (!TryFetchDeltaPicOrderCnt(state, out var result))
				throw new InvalidOperationException("The value DeltaPicOrderCnt could not be fetched.");
			return result!;
		}

		#endregion

		
		#region Derivative for redundant_pic_cnt

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.RedundantPicCnt" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.RedundantPicCnt" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.RedundantPicCnt" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchRedundantPicCnt(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.RedundantPicCnt;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.RedundantPicCnt" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.RedundantPicCnt" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchRedundantPicCnt(H264RbspState? state, out uint? result)
		{
			result = FetchRedundantPicCnt(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.RedundantPicCnt" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.RedundantPicCnt" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetRedundantPicCnt(H264RbspState? state)
		{
			if (!TryFetchRedundantPicCnt(state, out var result))
				throw new InvalidOperationException("The value RedundantPicCnt could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for direct_spatial_mv_pred_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DirectSpatialMvPredFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DirectSpatialMvPredFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DirectSpatialMvPredFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchDirectSpatialMvPredFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.DirectSpatialMvPredFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DirectSpatialMvPredFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DirectSpatialMvPredFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDirectSpatialMvPredFlag(H264RbspState? state, out bool? result)
		{
			result = FetchDirectSpatialMvPredFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DirectSpatialMvPredFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DirectSpatialMvPredFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetDirectSpatialMvPredFlag(H264RbspState? state)
		{
			if (!TryFetchDirectSpatialMvPredFlag(state, out var result))
				throw new InvalidOperationException("The value DirectSpatialMvPredFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for num_ref_idx_active_override_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxActiveOverrideFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxActiveOverrideFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxActiveOverrideFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchNumRefIdxActiveOverrideFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.NumRefIdxActiveOverrideFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxActiveOverrideFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxActiveOverrideFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNumRefIdxActiveOverrideFlag(H264RbspState? state, out bool? result)
		{
			result = FetchNumRefIdxActiveOverrideFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxActiveOverrideFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxActiveOverrideFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetNumRefIdxActiveOverrideFlag(H264RbspState? state)
		{
			if (!TryFetchNumRefIdxActiveOverrideFlag(state, out var result))
				throw new InvalidOperationException("The value NumRefIdxActiveOverrideFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for num_ref_idx_l0_active_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL0ActiveMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL0ActiveMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL0ActiveMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchNumRefIdxL0ActiveMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.NumRefIdxL0ActiveMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL0ActiveMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL0ActiveMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNumRefIdxL0ActiveMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchNumRefIdxL0ActiveMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL0ActiveMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL0ActiveMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetNumRefIdxL0ActiveMinus1(H264RbspState? state)
		{
			if (!TryFetchNumRefIdxL0ActiveMinus1(state, out var result))
				throw new InvalidOperationException("The value NumRefIdxL0ActiveMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for num_ref_idx_l1_active_minus1

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL1ActiveMinus1" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL1ActiveMinus1" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL1ActiveMinus1" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchNumRefIdxL1ActiveMinus1(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.NumRefIdxL1ActiveMinus1;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL1ActiveMinus1" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL1ActiveMinus1" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchNumRefIdxL1ActiveMinus1(H264RbspState? state, out uint? result)
		{
			result = FetchNumRefIdxL1ActiveMinus1(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL1ActiveMinus1" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.NumRefIdxL1ActiveMinus1" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetNumRefIdxL1ActiveMinus1(H264RbspState? state)
		{
			if (!TryFetchNumRefIdxL1ActiveMinus1(state, out var result))
				throw new InvalidOperationException("The value NumRefIdxL1ActiveMinus1 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for cabac_init_idc

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.CabacInitIdc" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.CabacInitIdc" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.CabacInitIdc" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchCabacInitIdc(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.CabacInitIdc;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.CabacInitIdc" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.CabacInitIdc" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchCabacInitIdc(H264RbspState? state, out uint? result)
		{
			result = FetchCabacInitIdc(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.CabacInitIdc" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.CabacInitIdc" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetCabacInitIdc(H264RbspState? state)
		{
			if (!TryFetchCabacInitIdc(state, out var result))
				throw new InvalidOperationException("The value CabacInitIdc could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_qp_delta

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQpDelta" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQpDelta" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQpDelta" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchSliceQpDelta(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.SliceQpDelta;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQpDelta" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQpDelta" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceQpDelta(H264RbspState? state, out int? result)
		{
			result = FetchSliceQpDelta(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQpDelta" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQpDelta" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetSliceQpDelta(H264RbspState? state)
		{
			if (!TryFetchSliceQpDelta(state, out var result))
				throw new InvalidOperationException("The value SliceQpDelta could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for sp_for_switch_flag

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SpForSwitchFlag" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SpForSwitchFlag" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SpForSwitchFlag" />, or <see langword="null" /> if unavailable.</returns>
		public static bool? FetchSpForSwitchFlag(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.SpForSwitchFlag;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SpForSwitchFlag" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SpForSwitchFlag" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSpForSwitchFlag(H264RbspState? state, out bool? result)
		{
			result = FetchSpForSwitchFlag(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SpForSwitchFlag" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SpForSwitchFlag" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static bool GetSpForSwitchFlag(H264RbspState? state)
		{
			if (!TryFetchSpForSwitchFlag(state, out var result))
				throw new InvalidOperationException("The value SpForSwitchFlag could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_qs_delta

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQsDelta" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQsDelta" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQsDelta" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchSliceQsDelta(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.SliceQsDelta;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQsDelta" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQsDelta" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceQsDelta(H264RbspState? state, out int? result)
		{
			result = FetchSliceQsDelta(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQsDelta" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceQsDelta" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetSliceQsDelta(H264RbspState? state)
		{
			if (!TryFetchSliceQsDelta(state, out var result))
				throw new InvalidOperationException("The value SliceQsDelta could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for disable_deblocking_filter_idc

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DisableDeblockingFilterIdc" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DisableDeblockingFilterIdc" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DisableDeblockingFilterIdc" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchDisableDeblockingFilterIdc(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.DisableDeblockingFilterIdc;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DisableDeblockingFilterIdc" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DisableDeblockingFilterIdc" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchDisableDeblockingFilterIdc(H264RbspState? state, out uint? result)
		{
			result = FetchDisableDeblockingFilterIdc(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DisableDeblockingFilterIdc" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.DisableDeblockingFilterIdc" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetDisableDeblockingFilterIdc(H264RbspState? state)
		{
			if (!TryFetchDisableDeblockingFilterIdc(state, out var result))
				throw new InvalidOperationException("The value DisableDeblockingFilterIdc could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_alpha_c0_offset_div2

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceAlphaC0OffsetDiv2" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceAlphaC0OffsetDiv2" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceAlphaC0OffsetDiv2" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchSliceAlphaC0OffsetDiv2(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.SliceAlphaC0OffsetDiv2;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceAlphaC0OffsetDiv2" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceAlphaC0OffsetDiv2" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceAlphaC0OffsetDiv2(H264RbspState? state, out int? result)
		{
			result = FetchSliceAlphaC0OffsetDiv2(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceAlphaC0OffsetDiv2" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceAlphaC0OffsetDiv2" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetSliceAlphaC0OffsetDiv2(H264RbspState? state)
		{
			if (!TryFetchSliceAlphaC0OffsetDiv2(state, out var result))
				throw new InvalidOperationException("The value SliceAlphaC0OffsetDiv2 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_beta_offset_div2

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceBetaOffsetDiv2" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceBetaOffsetDiv2" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceBetaOffsetDiv2" />, or <see langword="null" /> if unavailable.</returns>
		public static int? FetchSliceBetaOffsetDiv2(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.SliceBetaOffsetDiv2;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceBetaOffsetDiv2" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceBetaOffsetDiv2" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceBetaOffsetDiv2(H264RbspState? state, out int? result)
		{
			result = FetchSliceBetaOffsetDiv2(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceBetaOffsetDiv2" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceBetaOffsetDiv2" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static int GetSliceBetaOffsetDiv2(H264RbspState? state)
		{
			if (!TryFetchSliceBetaOffsetDiv2(state, out var result))
				throw new InvalidOperationException("The value SliceBetaOffsetDiv2 could not be fetched.");
			return result!.Value;
		}

		#endregion

		
		#region Derivative for slice_group_change_cycle

		/// <summary>
		///   Retrieves <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceGroupChangeCycle" /> from <paramref name="state" /> or returns
		///   <see langword="null" /> if <paramref name="state" />, <see cref="H264RbspState.SliceHeader" />, or
		///   <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceGroupChangeCycle" /> is <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns><see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceGroupChangeCycle" />, or <see langword="null" /> if unavailable.</returns>
		public static uint? FetchSliceGroupChangeCycle(H264RbspState? state)
		{
			if (state is null) return null;
			if (state.SliceHeader is null) return null;
			var value = state.SliceHeader.SliceGroupChangeCycle;
			return value;
		}

		/// <summary>
		///   Attempts to retrieve <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceGroupChangeCycle" /> from <paramref name="state" />. If successful, the return value is <see langword="true" /> and the
		///   output value is placed into <paramref name="result" />. When the return value is <see langword="false" />, <paramref name="result" />
		///   will be <see langword="null" />, and it indicates that fetching the value failed.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <param name="result">The resulting <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceGroupChangeCycle" /> is stored here if the return value is <see langword="true" />.</param>
		/// <returns>A boolean indicating if the value was successfully fetched (true). If so, <paramref name="result" /> contains the resulting RBSP element. Otherwise, it is set equal to <see langword="null" />.</returns>
		public static bool TryFetchSliceGroupChangeCycle(H264RbspState? state, out uint? result)
		{
			result = FetchSliceGroupChangeCycle(state);
			return result is not null;
		}

		/// <summary>
		///   💥 Forces <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceGroupChangeCycle" /> from <paramref name="state" /> to be fetched. If it can't be fetched, an <see cref="InvalidOperationException" /> exception
		///    is thrown. The returned value is guaranteed to never be <see langword="null" />.
		/// </summary>
		/// <param name="state">The source H.264 RBSP state</param>
		/// <returns>A returned value of type <see cref="H264RbspState.SliceHeader" />, and from there, <see cref="RbspSliceHeader.SliceGroupChangeCycle" />. It is guaranteed to never be <see langword="null" />.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the value cannot be fetched.</exception>
		public static uint GetSliceGroupChangeCycle(H264RbspState? state)
		{
			if (!TryFetchSliceGroupChangeCycle(state, out var result))
				throw new InvalidOperationException("The value SliceGroupChangeCycle could not be fetched.");
			return result!.Value;
		}

		#endregion

			}
}

