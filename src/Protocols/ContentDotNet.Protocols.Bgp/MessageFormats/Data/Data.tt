<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
namespace ContentDotNet.Protocols.Bgp.MessageFormats.Data
{
	using ContentDotNet.Protocols.Bgp.Abstractions;
	using ContentDotNet.Protocols.Bgp.Models;

	<#
		Elem("BgpMessageHeaderFormat",
			ByteArray("Marker"),
			ValueType("Length", "ushort"),
			ValueType("Type", "byte"));
		Elem("BgpOpenMessageFormat",
			ValueType("Version", "byte"),
			ValueType("MyAutonomousSystem", "ushort"),
			ValueType("HoldTime", "ushort"),
			ValueType("BgpIdentifier", "uint"),
			Enumerable("OptionalParameters", "List<BgpOpenOptionalParameterModel>"));
		Elem("BgpUpdateMessageFormat",
			ValueType("WithdrawnRoutesLength", "ushort"),
			Enumerable("WithdrawnRoutes", "List<string>"),
			ValueType("TotalPathAttributeLength", "ushort"),
			Enumerable("PathAttributes", "List<BgpPathAttributeModel>"),
			Enumerable("NetworkLayerReachabilityInformation", "List<string>"));
		Elem("BgpKeepAliveMessageFormat");
		Elem("BgpNotificationMessageFormat",
			ValueType("ErrorCode", "byte"),
			ValueType("ErrorSubCode", "byte"),
			ByteArray("Data"));

		for (int i = 0; i < _elements.Count; i++)
		{
			var e = _elements[i];
	#>

	/// <summary>
	///   Represents the BGP message format data.
	/// </summary>
	public record <#= e.Name #> : IMessageFormatData
	{
	<#
		for (int j = 0; j < e.Fields.Count; j++)
		{
			var f = e.Fields[j];
	#>

		/// <summary>
		///   Represents the <#= f.Name #> property of this BGP message format data.
		/// </summary>
		public <#= f.InnerType #> <#= f.Name #> { get; set; }

	<# } #>
		
		/// <summary>
		///   Initializes a new instance of the <see cref="<#= e.Name #>" /> message format record.
		/// </summary>
<#
			foreach (var x in e.Fields)
			{
#>
		/// param name="<#= x.Name #>">One of the message format's parameters.</param>
<# } #>
		public <#= e.Name #>(<#= string.Join(", ", e.Fields.Select(x => $"{x.InnerType} {FirstCharToLowerCase(x.Name)}")) #>)
		{
		<#
			foreach (var x in e.Fields)
			{
		#>

			this.<#= x.Name #> = <#= FirstCharToLowerCase(x.Name) #>;

		<# } #>
		}
	}

	<# } #>
}

<#+
public class Element
{
	public string Name { get; set; }
	public List<Field> Fields { get; set; } = new List<Field>();
}

public class Field
{
	public string Name { get; set; }
	public FieldType Type { get; set; }
	public string InnerType { get; set; }
}

public enum FieldType
{
	ValueType,
	Enumerable
}

private readonly List<Element> _elements = new List<Element>();

public void Elem(string name, params Field[] fields)
{
	var e = new Element() {
		Name = name,
		Fields = new List<Field>(fields)
	};
	_elements.Add(e);
}

public Field ValueType(string name, string type)
{
	return new Field() {
		Name = name,
		Type = FieldType.ValueType,
		InnerType = type
	};
}

public Field Enumerable(string name, string type)
{
	return new Field() {
		Name = name,
		Type = FieldType.Enumerable,
		InnerType = type
	};
}

public Field ByteArray(string name) => Enumerable(name, "List<byte>");

public static string FirstCharToLowerCase(string str)
{
	// https://stackoverflow.com/a/21755803/21072788
	string newString = str;
	if (!String.IsNullOrEmpty(newString))
		newString = Char.ToLower(newString[0]) + newString.Substring(1);
	return newString;
}
#>
