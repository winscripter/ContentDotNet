<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
// Yes we're generating tests now.

namespace ContentDotNet.Tests.H264.IO.Cabac
{
	using ContentDotNet.Tests.H264.TestTools.IO.Cabac;

	public partial class BinarizationReaderTests
	{
<#
	var testDB_BSlice = new Dictionary<string, int>()
	{
		["0"] = 0,
		["100"] = 1,
		["101"] = 2,
		["110000"] = 3,
		["110001"] = 4,
		["110010"] = 5,
		["110011"] = 6,
		["110100"] = 7,
		["110101"] = 8,
		["110110"] = 9,
		["110111"] = 10,
		["111110"] = 11,
		["1110000"] = 12,
		["1110001"] = 13,
		["1110010"] = 14,
		["1110011"] = 15,
		["1110100"] = 16,
		["1110101"] = 17,
		["1110110"] = 18,
		["1110111"] = 19,
		["1111000"] = 20,
		["1111001"] = 21,
		["111111"] = 22,
		["111101"] = 23
	};

	var testDB_PSPSlice = new Dictionary<string, int>()
	{
		["000"] = 0,
		["011"] = 1,
		["010"] = 2,
		["001"] = 3,
		["1"] = 5
	};

	var testDB_ISlice = new Dictionary<string, int>()
	{
		["0"] = 0,
		["100000"] = 1,
		["100001"] = 2,
		["100010"] = 3,
		["100011"] = 4,
		["1001000"] = 5,
		["1001001"] = 6,
		["1001010"] = 7,
		["1001011"] = 8,
		["1001100"] = 9,
		["1001101"] = 10,
		["1001110"] = 11,
		["1001111"] = 12,
		["101000"] = 13,
		["101001"] = 14,
		["101010"] = 15,
		["101011"] = 16,
		["1011000"] = 17,
		["1011001"] = 18,
		["1011010"] = 19,
		["1011011"] = 20,
		["1011100"] = 21,
		["1011101"] = 22,
		["1011110"] = 23,
		["1011111"] = 24,
		["11"] = 25
	};

	var testDB_PSPSlice_Sub = new Dictionary<string, int>()
	{
		["1"] = 0,
		["00"] = 1,
		["011"] = 2,
		["010"] = 3
	};

	var testDB_BSlice_Sub = new Dictionary<string, int>()
	{
		["0"] = 0,
		["100"] = 1,
		["101"] = 2,
		["11000"] = 3,
		["11001"] = 4,
		["11010"] = 5,
		["11011"] = 6,
		["111000"] = 7,
		["111001"] = 8,
		["111010"] = 9,
		["111011"] = 10,
		["11110"] = 11,
		["11111"] = 12
	};

	foreach (KeyValuePair<string, int> kvp in testDB_BSlice)
	{
#>
		[Fact]
		public void MbType_B_<#= kvp.Value #>()
		{
			var bits = new[]
			{
				<#= string.Join(", ", kvp.Key.ToCharArray().Select(x => x == '1' ? "true" : "false")) #>
			};

			Assert.Equal(<#= kvp.Value #>, TestMbType_B(new BinCustomDecoder(bits)));
		}

<# } #>

<#
	foreach (KeyValuePair<string, int> kvp in testDB_PSPSlice)
	{
#>
		[Fact]
		public void MbType_PSP_<#= kvp.Value #>()
		{
			var bits = new[]
			{
				<#= string.Join(", ", kvp.Key.ToCharArray().Select(x => x == '1' ? "true" : "false")) #>
			};

			Assert.Equal(<#= kvp.Value #>, TestMbType_P(new BinCustomDecoder(bits)));
		}

<# } #>

<#
	foreach (KeyValuePair<string, int> kvp in testDB_ISlice)
	{
#>
		[Fact]
		public void MbType_I_<#= kvp.Value #>()
		{
			var bits = new[]
			{
				<#= string.Join(", ", kvp.Key.ToCharArray().Select(x => x == '1' ? "true" : "false")) #>
			};

			Assert.Equal(<#= kvp.Value #>, TestMbType_I(new BinCustomDecoder(bits)));
		}

<# } #>

<#
	foreach (KeyValuePair<string, int> kvp in testDB_PSPSlice_Sub)
	{
#>
		[Fact]
		public void SubMbType_P_<#= kvp.Value #>()
		{
			var bits = new[]
			{
				<#= string.Join(", ", kvp.Key.ToCharArray().Select(x => x == '1' ? "true" : "false")) #>
			};

			Assert.Equal(<#= kvp.Value #>, TestSubMbType_P(new BinCustomDecoder(bits)));
		}

<# } #>

<#
	foreach (KeyValuePair<string, int> kvp in testDB_BSlice_Sub)
	{
#>
		[Fact]
		public void SubMbType_B_<#= kvp.Value #>()
		{
			var bits = new[]
			{
				<#= string.Join(", ", kvp.Key.ToCharArray().Select(x => x == '1' ? "true" : "false")) #>
			};

			Assert.Equal(<#= kvp.Value #>, TestSubMbType_B(new BinCustomDecoder(bits)));
		}

<# } #>
	}
}
